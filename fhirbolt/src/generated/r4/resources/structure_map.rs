// Generated on 2022-07-11 by fhirbolt-codegen v0.1.0
#[derive(Debug, Clone)]
pub enum StructureMapGroupRuleTargetParameterValue {
    Id(Box<super::super::types::Id>),
    String(Box<super::super::types::String>),
    Boolean(Box<super::super::types::Boolean>),
    Integer(Box<super::super::types::Integer>),
    Decimal(Box<super::super::types::Decimal>),
}
#[derive(Debug, Clone)]
pub enum StructureMapGroupRuleSourceDefaultValue {
    Base64Binary(Box<super::super::types::Base64Binary>),
    Boolean(Box<super::super::types::Boolean>),
    Canonical(Box<super::super::types::Canonical>),
    Code(Box<super::super::types::Code>),
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Decimal(Box<super::super::types::Decimal>),
    Id(Box<super::super::types::Id>),
    Instant(Box<super::super::types::Instant>),
    Integer(Box<super::super::types::Integer>),
    Markdown(Box<super::super::types::Markdown>),
    Oid(Box<super::super::types::Oid>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    String(Box<super::super::types::String>),
    Time(Box<super::super::types::Time>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Uri(Box<super::super::types::Uri>),
    Url(Box<super::super::types::Url>),
    Uuid(Box<super::super::types::Uuid>),
    Address(Box<super::super::types::Address>),
    Age(Box<super::super::types::Age>),
    Annotation(Box<super::super::types::Annotation>),
    Attachment(Box<super::super::types::Attachment>),
    CodeableConcept(Box<super::super::types::CodeableConcept>),
    Coding(Box<super::super::types::Coding>),
    ContactPoint(Box<super::super::types::ContactPoint>),
    Count(Box<super::super::types::Count>),
    Distance(Box<super::super::types::Distance>),
    Duration(Box<super::super::types::Duration>),
    HumanName(Box<super::super::types::HumanName>),
    Identifier(Box<super::super::types::Identifier>),
    Money(Box<super::super::types::Money>),
    Period(Box<super::super::types::Period>),
    Quantity(Box<super::super::types::Quantity>),
    Range(Box<super::super::types::Range>),
    Ratio(Box<super::super::types::Ratio>),
    Reference(Box<super::super::types::Reference>),
    SampledData(Box<super::super::types::SampledData>),
    Signature(Box<super::super::types::Signature>),
    Timing(Box<super::super::types::Timing>),
    ContactDetail(Box<super::super::types::ContactDetail>),
    Contributor(Box<super::super::types::Contributor>),
    DataRequirement(Box<super::super::types::DataRequirement>),
    Expression(Box<super::super::types::Expression>),
    ParameterDefinition(Box<super::super::types::ParameterDefinition>),
    RelatedArtifact(Box<super::super::types::RelatedArtifact>),
    TriggerDefinition(Box<super::super::types::TriggerDefinition>),
    UsageContext(Box<super::super::types::UsageContext>),
    Dosage(Box<super::super::types::Dosage>),
    Meta(Box<super::super::types::Meta>),
}
#[derive(Debug, Clone)]
pub struct StructureMapStructure {
    pub r#alias: Option<super::super::types::String>,
    pub r#documentation: Option<super::super::types::String>,
    pub r#url: super::super::types::Canonical,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#id: Option<std::string::String>,
    pub r#mode: super::super::types::Code,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupRuleTargetParameter {
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#value: StructureMapGroupRuleTargetParameterValue,
    pub r#id: Option<std::string::String>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupRuleTarget {
    pub r#parameter: Vec<StructureMapGroupRuleTargetParameter>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#variable: Option<super::super::types::Id>,
    pub r#element: Option<super::super::types::String>,
    pub r#id: Option<std::string::String>,
    pub r#list_rule_id: Option<super::super::types::Id>,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#context: Option<super::super::types::Id>,
    pub r#list_mode: Vec<super::super::types::Code>,
    pub r#transform: Option<super::super::types::Code>,
    pub r#context_type: Option<super::super::types::Code>,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupRuleSource {
    pub r#condition: Option<super::super::types::String>,
    pub r#check: Option<super::super::types::String>,
    pub r#log_message: Option<super::super::types::String>,
    pub r#max: Option<super::super::types::String>,
    pub r#id: Option<std::string::String>,
    pub r#context: super::super::types::Id,
    pub r#min: Option<super::super::types::Integer>,
    pub r#default_value: Option<StructureMapGroupRuleSourceDefaultValue>,
    pub r#element: Option<super::super::types::String>,
    pub r#list_mode: Option<super::super::types::Code>,
    pub r#variable: Option<super::super::types::Id>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#type: Option<super::super::types::String>,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupRuleDependent {
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#id: Option<std::string::String>,
    pub r#variable: Vec<super::super::types::String>,
    pub r#name: super::super::types::Id,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupRule {
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#rule: Vec<StructureMapGroupRule>,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#target: Vec<StructureMapGroupRuleTarget>,
    pub r#name: super::super::types::Id,
    pub r#source: Vec<StructureMapGroupRuleSource>,
    pub r#documentation: Option<super::super::types::String>,
    pub r#id: Option<std::string::String>,
    pub r#dependent: Vec<StructureMapGroupRuleDependent>,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroupInput {
    pub r#id: Option<std::string::String>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#type: Option<super::super::types::String>,
    pub r#mode: super::super::types::Code,
    pub r#documentation: Option<super::super::types::String>,
    pub r#name: super::super::types::Id,
}
#[derive(Debug, Clone)]
pub struct StructureMapGroup {
    pub r#rule: Vec<StructureMapGroupRule>,
    pub r#extends: Option<super::super::types::Id>,
    pub r#input: Vec<StructureMapGroupInput>,
    pub r#id: Option<std::string::String>,
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#name: super::super::types::Id,
    pub r#documentation: Option<super::super::types::String>,
    pub r#type_mode: super::super::types::Code,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
}
#[derive(Debug, Clone)]
pub struct StructureMap {
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    pub r#description: Option<super::super::types::Markdown>,
    pub r#id: Option<std::string::String>,
    pub r#language: Option<super::super::types::Code>,
    pub r#name: super::super::types::String,
    pub r#status: super::super::types::Code,
    pub r#structure: Vec<StructureMapStructure>,
    pub r#version: Option<super::super::types::String>,
    pub r#identifier: Vec<Box<super::super::types::Identifier>>,
    pub r#use_context: Vec<Box<super::super::types::UsageContext>>,
    pub r#url: super::super::types::Uri,
    pub r#jurisdiction: Vec<Box<super::super::types::CodeableConcept>>,
    pub r#import: Vec<super::super::types::Canonical>,
    pub r#purpose: Option<super::super::types::Markdown>,
    pub r#contact: Vec<Box<super::super::types::ContactDetail>>,
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    pub r#copyright: Option<super::super::types::Markdown>,
    pub r#implicit_rules: Option<super::super::types::Uri>,
    pub r#group: Vec<StructureMapGroup>,
    pub r#title: Option<super::super::types::String>,
    pub r#experimental: Option<super::super::types::Boolean>,
    pub r#date: Option<super::super::types::DateTime>,
    pub r#contained: Vec<Box<super::Resource>>,
    pub r#meta: Option<Box<super::super::types::Meta>>,
    pub r#publisher: Option<super::super::types::String>,
    pub r#text: Option<Box<super::super::types::Narrative>>,
}
