// Generated on 2023-03-28 by fhirbolt-codegen v0.1.0
#[doc = "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionDefaultValue {
    Base64Binary(Box<super::super::types::Base64Binary>),
    Boolean(Box<super::super::types::Boolean>),
    Canonical(Box<super::super::types::Canonical>),
    Code(Box<super::super::types::Code>),
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Decimal(Box<super::super::types::Decimal>),
    Id(Box<super::super::types::Id>),
    Instant(Box<super::super::types::Instant>),
    Integer(Box<super::super::types::Integer>),
    Markdown(Box<super::super::types::Markdown>),
    Oid(Box<super::super::types::Oid>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    String(Box<super::super::types::String>),
    Time(Box<super::super::types::Time>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Uri(Box<super::super::types::Uri>),
    Url(Box<super::super::types::Url>),
    Uuid(Box<super::super::types::Uuid>),
    Address(Box<super::super::types::Address>),
    Age(Box<super::super::types::Age>),
    Annotation(Box<super::super::types::Annotation>),
    Attachment(Box<super::super::types::Attachment>),
    CodeableConcept(Box<super::super::types::CodeableConcept>),
    CodeableReference(Box<super::super::types::CodeableReference>),
    Coding(Box<super::super::types::Coding>),
    ContactPoint(Box<super::super::types::ContactPoint>),
    Count(Box<super::super::types::Count>),
    Distance(Box<super::super::types::Distance>),
    Duration(Box<super::super::types::Duration>),
    HumanName(Box<super::super::types::HumanName>),
    Identifier(Box<super::super::types::Identifier>),
    Money(Box<super::super::types::Money>),
    Period(Box<super::super::types::Period>),
    Quantity(Box<super::super::types::Quantity>),
    Range(Box<super::super::types::Range>),
    Ratio(Box<super::super::types::Ratio>),
    RatioRange(Box<super::super::types::RatioRange>),
    Reference(Box<super::super::types::Reference>),
    SampledData(Box<super::super::types::SampledData>),
    Signature(Box<super::super::types::Signature>),
    Timing(Box<super::super::types::Timing>),
    ContactDetail(Box<super::super::types::ContactDetail>),
    Contributor(Box<super::super::types::Contributor>),
    DataRequirement(Box<super::super::types::DataRequirement>),
    Expression(Box<super::super::types::Expression>),
    ParameterDefinition(Box<super::super::types::ParameterDefinition>),
    RelatedArtifact(Box<super::super::types::RelatedArtifact>),
    TriggerDefinition(Box<super::super::types::TriggerDefinition>),
    UsageContext(Box<super::super::types::UsageContext>),
    Dosage(Box<super::super::types::Dosage>),
    Invalid,
}
impl Default for ElementDefinitionDefaultValue {
    fn default() -> ElementDefinitionDefaultValue {
        ElementDefinitionDefaultValue::Invalid
    }
}
#[doc = "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionFixed {
    Base64Binary(Box<super::super::types::Base64Binary>),
    Boolean(Box<super::super::types::Boolean>),
    Canonical(Box<super::super::types::Canonical>),
    Code(Box<super::super::types::Code>),
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Decimal(Box<super::super::types::Decimal>),
    Id(Box<super::super::types::Id>),
    Instant(Box<super::super::types::Instant>),
    Integer(Box<super::super::types::Integer>),
    Markdown(Box<super::super::types::Markdown>),
    Oid(Box<super::super::types::Oid>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    String(Box<super::super::types::String>),
    Time(Box<super::super::types::Time>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Uri(Box<super::super::types::Uri>),
    Url(Box<super::super::types::Url>),
    Uuid(Box<super::super::types::Uuid>),
    Address(Box<super::super::types::Address>),
    Age(Box<super::super::types::Age>),
    Annotation(Box<super::super::types::Annotation>),
    Attachment(Box<super::super::types::Attachment>),
    CodeableConcept(Box<super::super::types::CodeableConcept>),
    CodeableReference(Box<super::super::types::CodeableReference>),
    Coding(Box<super::super::types::Coding>),
    ContactPoint(Box<super::super::types::ContactPoint>),
    Count(Box<super::super::types::Count>),
    Distance(Box<super::super::types::Distance>),
    Duration(Box<super::super::types::Duration>),
    HumanName(Box<super::super::types::HumanName>),
    Identifier(Box<super::super::types::Identifier>),
    Money(Box<super::super::types::Money>),
    Period(Box<super::super::types::Period>),
    Quantity(Box<super::super::types::Quantity>),
    Range(Box<super::super::types::Range>),
    Ratio(Box<super::super::types::Ratio>),
    RatioRange(Box<super::super::types::RatioRange>),
    Reference(Box<super::super::types::Reference>),
    SampledData(Box<super::super::types::SampledData>),
    Signature(Box<super::super::types::Signature>),
    Timing(Box<super::super::types::Timing>),
    ContactDetail(Box<super::super::types::ContactDetail>),
    Contributor(Box<super::super::types::Contributor>),
    DataRequirement(Box<super::super::types::DataRequirement>),
    Expression(Box<super::super::types::Expression>),
    ParameterDefinition(Box<super::super::types::ParameterDefinition>),
    RelatedArtifact(Box<super::super::types::RelatedArtifact>),
    TriggerDefinition(Box<super::super::types::TriggerDefinition>),
    UsageContext(Box<super::super::types::UsageContext>),
    Dosage(Box<super::super::types::Dosage>),
    Invalid,
}
impl Default for ElementDefinitionFixed {
    fn default() -> ElementDefinitionFixed {
        ElementDefinitionFixed::Invalid
    }
}
#[doc = "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern\\[x\\] is used to constrain a primitive, it means that the value provided in the pattern\\[x\\] must match the instance value exactly.\n\nWhen pattern\\[x\\] is used to constrain an array, it means that each element provided in the pattern\\[x\\] array must (recursively) match at least one element from the instance array.\n\nWhen pattern\\[x\\] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionPattern {
    Base64Binary(Box<super::super::types::Base64Binary>),
    Boolean(Box<super::super::types::Boolean>),
    Canonical(Box<super::super::types::Canonical>),
    Code(Box<super::super::types::Code>),
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Decimal(Box<super::super::types::Decimal>),
    Id(Box<super::super::types::Id>),
    Instant(Box<super::super::types::Instant>),
    Integer(Box<super::super::types::Integer>),
    Markdown(Box<super::super::types::Markdown>),
    Oid(Box<super::super::types::Oid>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    String(Box<super::super::types::String>),
    Time(Box<super::super::types::Time>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Uri(Box<super::super::types::Uri>),
    Url(Box<super::super::types::Url>),
    Uuid(Box<super::super::types::Uuid>),
    Address(Box<super::super::types::Address>),
    Age(Box<super::super::types::Age>),
    Annotation(Box<super::super::types::Annotation>),
    Attachment(Box<super::super::types::Attachment>),
    CodeableConcept(Box<super::super::types::CodeableConcept>),
    CodeableReference(Box<super::super::types::CodeableReference>),
    Coding(Box<super::super::types::Coding>),
    ContactPoint(Box<super::super::types::ContactPoint>),
    Count(Box<super::super::types::Count>),
    Distance(Box<super::super::types::Distance>),
    Duration(Box<super::super::types::Duration>),
    HumanName(Box<super::super::types::HumanName>),
    Identifier(Box<super::super::types::Identifier>),
    Money(Box<super::super::types::Money>),
    Period(Box<super::super::types::Period>),
    Quantity(Box<super::super::types::Quantity>),
    Range(Box<super::super::types::Range>),
    Ratio(Box<super::super::types::Ratio>),
    RatioRange(Box<super::super::types::RatioRange>),
    Reference(Box<super::super::types::Reference>),
    SampledData(Box<super::super::types::SampledData>),
    Signature(Box<super::super::types::Signature>),
    Timing(Box<super::super::types::Timing>),
    ContactDetail(Box<super::super::types::ContactDetail>),
    Contributor(Box<super::super::types::Contributor>),
    DataRequirement(Box<super::super::types::DataRequirement>),
    Expression(Box<super::super::types::Expression>),
    ParameterDefinition(Box<super::super::types::ParameterDefinition>),
    RelatedArtifact(Box<super::super::types::RelatedArtifact>),
    TriggerDefinition(Box<super::super::types::TriggerDefinition>),
    UsageContext(Box<super::super::types::UsageContext>),
    Dosage(Box<super::super::types::Dosage>),
    Invalid,
}
impl Default for ElementDefinitionPattern {
    fn default() -> ElementDefinitionPattern {
        ElementDefinitionPattern::Invalid
    }
}
#[doc = "The actual value for the element, which must be one of the types allowed for this element."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionExampleValue {
    Base64Binary(Box<super::super::types::Base64Binary>),
    Boolean(Box<super::super::types::Boolean>),
    Canonical(Box<super::super::types::Canonical>),
    Code(Box<super::super::types::Code>),
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Decimal(Box<super::super::types::Decimal>),
    Id(Box<super::super::types::Id>),
    Instant(Box<super::super::types::Instant>),
    Integer(Box<super::super::types::Integer>),
    Markdown(Box<super::super::types::Markdown>),
    Oid(Box<super::super::types::Oid>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    String(Box<super::super::types::String>),
    Time(Box<super::super::types::Time>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Uri(Box<super::super::types::Uri>),
    Url(Box<super::super::types::Url>),
    Uuid(Box<super::super::types::Uuid>),
    Address(Box<super::super::types::Address>),
    Age(Box<super::super::types::Age>),
    Annotation(Box<super::super::types::Annotation>),
    Attachment(Box<super::super::types::Attachment>),
    CodeableConcept(Box<super::super::types::CodeableConcept>),
    CodeableReference(Box<super::super::types::CodeableReference>),
    Coding(Box<super::super::types::Coding>),
    ContactPoint(Box<super::super::types::ContactPoint>),
    Count(Box<super::super::types::Count>),
    Distance(Box<super::super::types::Distance>),
    Duration(Box<super::super::types::Duration>),
    HumanName(Box<super::super::types::HumanName>),
    Identifier(Box<super::super::types::Identifier>),
    Money(Box<super::super::types::Money>),
    Period(Box<super::super::types::Period>),
    Quantity(Box<super::super::types::Quantity>),
    Range(Box<super::super::types::Range>),
    Ratio(Box<super::super::types::Ratio>),
    RatioRange(Box<super::super::types::RatioRange>),
    Reference(Box<super::super::types::Reference>),
    SampledData(Box<super::super::types::SampledData>),
    Signature(Box<super::super::types::Signature>),
    Timing(Box<super::super::types::Timing>),
    ContactDetail(Box<super::super::types::ContactDetail>),
    Contributor(Box<super::super::types::Contributor>),
    DataRequirement(Box<super::super::types::DataRequirement>),
    Expression(Box<super::super::types::Expression>),
    ParameterDefinition(Box<super::super::types::ParameterDefinition>),
    RelatedArtifact(Box<super::super::types::RelatedArtifact>),
    TriggerDefinition(Box<super::super::types::TriggerDefinition>),
    UsageContext(Box<super::super::types::UsageContext>),
    Dosage(Box<super::super::types::Dosage>),
    Invalid,
}
impl Default for ElementDefinitionExampleValue {
    fn default() -> ElementDefinitionExampleValue {
        ElementDefinitionExampleValue::Invalid
    }
}
#[doc = "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionMinValue {
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Instant(Box<super::super::types::Instant>),
    Time(Box<super::super::types::Time>),
    Decimal(Box<super::super::types::Decimal>),
    Integer(Box<super::super::types::Integer>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Quantity(Box<super::super::types::Quantity>),
    Invalid,
}
impl Default for ElementDefinitionMinValue {
    fn default() -> ElementDefinitionMinValue {
        ElementDefinitionMinValue::Invalid
    }
}
#[doc = "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."]
#[derive(Debug, Clone)]
pub enum ElementDefinitionMaxValue {
    Date(Box<super::super::types::Date>),
    DateTime(Box<super::super::types::DateTime>),
    Instant(Box<super::super::types::Instant>),
    Time(Box<super::super::types::Time>),
    Decimal(Box<super::super::types::Decimal>),
    Integer(Box<super::super::types::Integer>),
    PositiveInt(Box<super::super::types::PositiveInt>),
    UnsignedInt(Box<super::super::types::UnsignedInt>),
    Quantity(Box<super::super::types::Quantity>),
    Invalid,
}
impl Default for ElementDefinitionMaxValue {
    fn default() -> ElementDefinitionMaxValue {
        ElementDefinitionMaxValue::Invalid
    }
}
#[doc = "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionSlicingDiscriminator {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "How the element value is interpreted when discrimination is evaluated."]
    pub r#type: super::super::types::Code,
    #[doc = "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based."]
    pub r#path: super::super::types::String,
}
impl serde::ser::Serialize for ElementDefinitionSlicingDiscriminator {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#type.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("type", &some)?;
                }
                if self.r#type.id.is_some() || !self.r#type.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#type.id.as_ref(),
                        extension: &self.r#type.extension,
                    };
                    state.serialize_entry("_type", &primitive_element)?;
                }
            } else {
                state.serialize_entry("type", &self.r#type)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#path.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("path", &some)?;
                }
                if self.r#path.id.is_some() || !self.r#path.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#path.id.as_ref(),
                        extension: &self.r#path.extension,
                    };
                    state.serialize_entry("_path", &primitive_element)?;
                }
            } else {
                state.serialize_entry("path", &self.r#path)?;
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionSlicingDiscriminator {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "type")]
            Type,
            #[serde(rename = "_type")]
            TypePrimitiveElement,
            #[serde(rename = "path")]
            Path,
            #[serde(rename = "_path")]
            PathPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionSlicingDiscriminator;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionSlicingDiscriminator")
            }
            fn visit_map<V>(
                self,
                mut map_access: V,
            ) -> Result<ElementDefinitionSlicingDiscriminator, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#type: Option<super::super::types::Code> = None;
                let mut r#path: Option<super::super::types::String> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Type => {
                                if _ctx.from_json {
                                    let some = r#type.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("type"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#type.is_some() {
                                        return Err(serde::de::Error::duplicate_field("type"));
                                    }
                                    r#type = Some(map_access.next_value()?);
                                }
                            }
                            Field::TypePrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#type.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_type"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "type",
                                        &["id", "extension", "type", "path"],
                                    ));
                                }
                            }
                            Field::Path => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#path.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    r#path = Some(map_access.next_value()?);
                                }
                            }
                            Field::PathPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_path"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "path",
                                        &["id", "extension", "type", "path"],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &["id", "extension", "type", "path"],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionSlicingDiscriminator {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#type: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#type.unwrap_or(Default::default())
                        } else {
                            r#type.ok_or(serde::de::Error::missing_field("type"))?
                        },
                        r#path: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#path.unwrap_or(Default::default())
                        } else {
                            r#path.ok_or(serde::de::Error::missing_field("path"))?
                        },
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set)."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionSlicing {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices."]
    pub r#discriminator: Vec<ElementDefinitionSlicingDiscriminator>,
    #[doc = "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated."]
    pub r#description: Option<super::super::types::String>,
    #[doc = "If the matching elements have to occur in the same order as defined in the profile."]
    pub r#ordered: Option<super::super::types::Boolean>,
    #[doc = "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end."]
    pub r#rules: super::super::types::Code,
}
impl serde::ser::Serialize for ElementDefinitionSlicing {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if !self.r#discriminator.is_empty() {
                state.serialize_entry("discriminator", &self.r#discriminator)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#description.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("description", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_description", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#description.as_ref() {
                    state.serialize_entry("description", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#ordered.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("ordered", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_ordered", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#ordered.as_ref() {
                    state.serialize_entry("ordered", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#rules.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("rules", &some)?;
                }
                if self.r#rules.id.is_some() || !self.r#rules.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#rules.id.as_ref(),
                        extension: &self.r#rules.extension,
                    };
                    state.serialize_entry("_rules", &primitive_element)?;
                }
            } else {
                state.serialize_entry("rules", &self.r#rules)?;
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionSlicing {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "discriminator")]
            Discriminator,
            #[serde(rename = "description")]
            Description,
            #[serde(rename = "_description")]
            DescriptionPrimitiveElement,
            #[serde(rename = "ordered")]
            Ordered,
            #[serde(rename = "_ordered")]
            OrderedPrimitiveElement,
            #[serde(rename = "rules")]
            Rules,
            #[serde(rename = "_rules")]
            RulesPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionSlicing;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionSlicing")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionSlicing, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#discriminator: Option<Vec<ElementDefinitionSlicingDiscriminator>> = None;
                let mut r#description: Option<super::super::types::String> = None;
                let mut r#ordered: Option<super::super::types::Boolean> = None;
                let mut r#rules: Option<super::super::types::Code> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Discriminator => {
                                if r#discriminator.is_some() {
                                    return Err(serde::de::Error::duplicate_field("discriminator"));
                                }
                                r#discriminator = Some(map_access.next_value()?);
                            }
                            Field::Description => {
                                if _ctx.from_json {
                                    let some = r#description.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "description",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#description.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "description",
                                        ));
                                    }
                                    r#description = Some(map_access.next_value()?);
                                }
                            }
                            Field::DescriptionPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#description.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_description",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "description",
                                        &[
                                            "id",
                                            "extension",
                                            "discriminator",
                                            "description",
                                            "ordered",
                                            "rules",
                                        ],
                                    ));
                                }
                            }
                            Field::Ordered => {
                                if _ctx.from_json {
                                    let some = r#ordered.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("ordered"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#ordered.is_some() {
                                        return Err(serde::de::Error::duplicate_field("ordered"));
                                    }
                                    r#ordered = Some(map_access.next_value()?);
                                }
                            }
                            Field::OrderedPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#ordered.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_ordered"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "ordered",
                                        &[
                                            "id",
                                            "extension",
                                            "discriminator",
                                            "description",
                                            "ordered",
                                            "rules",
                                        ],
                                    ));
                                }
                            }
                            Field::Rules => {
                                if _ctx.from_json {
                                    let some = r#rules.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("rules"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#rules.is_some() {
                                        return Err(serde::de::Error::duplicate_field("rules"));
                                    }
                                    r#rules = Some(map_access.next_value()?);
                                }
                            }
                            Field::RulesPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#rules.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_rules"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "rules",
                                        &[
                                            "id",
                                            "extension",
                                            "discriminator",
                                            "description",
                                            "ordered",
                                            "rules",
                                        ],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &[
                                        "id",
                                        "extension",
                                        "discriminator",
                                        "description",
                                        "ordered",
                                        "rules",
                                    ],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionSlicing {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#discriminator: r#discriminator.unwrap_or(vec![]),
                        r#description,
                        r#ordered,
                        r#rules: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#rules.unwrap_or(Default::default())
                        } else {
                            r#rules.ok_or(serde::de::Error::missing_field("rules"))?
                        },
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionBase {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base."]
    pub r#path: super::super::types::String,
    #[doc = "Minimum cardinality of the base element identified by the path."]
    pub r#min: super::super::types::UnsignedInt,
    #[doc = "Maximum cardinality of the base element identified by the path."]
    pub r#max: super::super::types::String,
}
impl serde::ser::Serialize for ElementDefinitionBase {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#path.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("path", &some)?;
                }
                if self.r#path.id.is_some() || !self.r#path.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#path.id.as_ref(),
                        extension: &self.r#path.extension,
                    };
                    state.serialize_entry("_path", &primitive_element)?;
                }
            } else {
                state.serialize_entry("path", &self.r#path)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#min.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("min", &some)?;
                }
                if self.r#min.id.is_some() || !self.r#min.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#min.id.as_ref(),
                        extension: &self.r#min.extension,
                    };
                    state.serialize_entry("_min", &primitive_element)?;
                }
            } else {
                state.serialize_entry("min", &self.r#min)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#max.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("max", &some)?;
                }
                if self.r#max.id.is_some() || !self.r#max.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#max.id.as_ref(),
                        extension: &self.r#max.extension,
                    };
                    state.serialize_entry("_max", &primitive_element)?;
                }
            } else {
                state.serialize_entry("max", &self.r#max)?;
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionBase {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "path")]
            Path,
            #[serde(rename = "_path")]
            PathPrimitiveElement,
            #[serde(rename = "min")]
            Min,
            #[serde(rename = "_min")]
            MinPrimitiveElement,
            #[serde(rename = "max")]
            Max,
            #[serde(rename = "_max")]
            MaxPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionBase;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionBase")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionBase, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#path: Option<super::super::types::String> = None;
                let mut r#min: Option<super::super::types::UnsignedInt> = None;
                let mut r#max: Option<super::super::types::String> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Path => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#path.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    r#path = Some(map_access.next_value()?);
                                }
                            }
                            Field::PathPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_path"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "path",
                                        &["id", "extension", "path", "min", "max"],
                                    ));
                                }
                            }
                            Field::Min => {
                                if _ctx.from_json {
                                    let some = r#min.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("min"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#min.is_some() {
                                        return Err(serde::de::Error::duplicate_field("min"));
                                    }
                                    r#min = Some(map_access.next_value()?);
                                }
                            }
                            Field::MinPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#min.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_min"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "min",
                                        &["id", "extension", "path", "min", "max"],
                                    ));
                                }
                            }
                            Field::Max => {
                                if _ctx.from_json {
                                    let some = r#max.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("max"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#max.is_some() {
                                        return Err(serde::de::Error::duplicate_field("max"));
                                    }
                                    r#max = Some(map_access.next_value()?);
                                }
                            }
                            Field::MaxPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#max.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_max"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "max",
                                        &["id", "extension", "path", "min", "max"],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &["id", "extension", "path", "min", "max"],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionBase {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#path: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#path.unwrap_or(Default::default())
                        } else {
                            r#path.ok_or(serde::de::Error::missing_field("path"))?
                        },
                        r#min: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#min.unwrap_or(Default::default())
                        } else {
                            r#min.ok_or(serde::de::Error::missing_field("min"))?
                        },
                        r#max: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#max.unwrap_or(Default::default())
                        } else {
                            r#max.ok_or(serde::de::Error::missing_field("max"))?
                        },
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "The data type or resource that the value of this element is permitted to be."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionType {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to <http://hl7.org/fhir/StructureDefinition> e.g. \"string\" is a reference to <http://hl7.org/fhir/StructureDefinition/string>. Absolute URLs are only allowed in logical models."]
    pub r#code: super::super::types::Uri,
    #[doc = "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide."]
    pub r#profile: Vec<super::super::types::Canonical>,
    #[doc = "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide."]
    pub r#target_profile: Vec<super::super::types::Canonical>,
    #[doc = "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle."]
    pub r#aggregation: Vec<super::super::types::Code>,
    #[doc = "Whether this reference needs to be version specific or version independent, or whether either can be used."]
    pub r#versioning: Option<super::super::types::Code>,
}
impl serde::ser::Serialize for ElementDefinitionType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#code.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("code", &some)?;
                }
                if self.r#code.id.is_some() || !self.r#code.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#code.id.as_ref(),
                        extension: &self.r#code.extension,
                    };
                    state.serialize_entry("_code", &primitive_element)?;
                }
            } else {
                state.serialize_entry("code", &self.r#code)?;
            }
            if _ctx.output_json {
                if !self.r#profile.is_empty() {
                    let values = self
                        .r#profile
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("profile", &values)?;
                    }
                    let requires_elements = self
                        .r#profile
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#profile
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_profile", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#profile.is_empty() {
                    state.serialize_entry("profile", &self.r#profile)?;
                }
            }
            if _ctx.output_json {
                if !self.r#target_profile.is_empty() {
                    let values = self
                        .r#target_profile
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("targetProfile", &values)?;
                    }
                    let requires_elements = self
                        .r#target_profile
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#target_profile
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_targetProfile", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#target_profile.is_empty() {
                    state.serialize_entry("targetProfile", &self.r#target_profile)?;
                }
            }
            if _ctx.output_json {
                if !self.r#aggregation.is_empty() {
                    let values = self
                        .r#aggregation
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("aggregation", &values)?;
                    }
                    let requires_elements = self
                        .r#aggregation
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#aggregation
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_aggregation", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#aggregation.is_empty() {
                    state.serialize_entry("aggregation", &self.r#aggregation)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#versioning.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("versioning", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_versioning", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#versioning.as_ref() {
                    state.serialize_entry("versioning", some)?;
                }
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "code")]
            Code,
            #[serde(rename = "_code")]
            CodePrimitiveElement,
            #[serde(rename = "profile")]
            Profile,
            #[serde(rename = "_profile")]
            ProfilePrimitiveElement,
            #[serde(rename = "targetProfile")]
            TargetProfile,
            #[serde(rename = "_targetProfile")]
            TargetProfilePrimitiveElement,
            #[serde(rename = "aggregation")]
            Aggregation,
            #[serde(rename = "_aggregation")]
            AggregationPrimitiveElement,
            #[serde(rename = "versioning")]
            Versioning,
            #[serde(rename = "_versioning")]
            VersioningPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionType;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionType")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionType, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#code: Option<super::super::types::Uri> = None;
                let mut r#profile: Option<Vec<super::super::types::Canonical>> = None;
                let mut r#target_profile: Option<Vec<super::super::types::Canonical>> = None;
                let mut r#aggregation: Option<Vec<super::super::types::Code>> = None;
                let mut r#versioning: Option<super::super::types::Code> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Code => {
                                if _ctx.from_json {
                                    let some = r#code.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("code"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#code.is_some() {
                                        return Err(serde::de::Error::duplicate_field("code"));
                                    }
                                    r#code = Some(map_access.next_value()?);
                                }
                            }
                            Field::CodePrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#code.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_code"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "code",
                                        &[
                                            "id",
                                            "extension",
                                            "code",
                                            "profile",
                                            "targetProfile",
                                            "aggregation",
                                            "versioning",
                                        ],
                                    ));
                                }
                            }
                            Field::Profile => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#profile.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field("profile"));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#profile.is_some() {
                                        return Err(serde::de::Error::duplicate_field("profile"));
                                    }
                                    r#profile = Some(map_access.next_value()?);
                                }
                            }
                            Field::ProfilePrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#profile.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field("_profile"));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "profile",
                                        &[
                                            "id",
                                            "extension",
                                            "code",
                                            "profile",
                                            "targetProfile",
                                            "aggregation",
                                            "versioning",
                                        ],
                                    ));
                                }
                            }
                            Field::TargetProfile => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#target_profile.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field(
                                            "targetProfile",
                                        ));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#target_profile.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "targetProfile",
                                        ));
                                    }
                                    r#target_profile = Some(map_access.next_value()?);
                                }
                            }
                            Field::TargetProfilePrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#target_profile.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_targetProfile",
                                        ));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "targetProfile",
                                        &[
                                            "id",
                                            "extension",
                                            "code",
                                            "profile",
                                            "targetProfile",
                                            "aggregation",
                                            "versioning",
                                        ],
                                    ));
                                }
                            }
                            Field::Aggregation => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#aggregation.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field(
                                            "aggregation",
                                        ));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#aggregation.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "aggregation",
                                        ));
                                    }
                                    r#aggregation = Some(map_access.next_value()?);
                                }
                            }
                            Field::AggregationPrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#aggregation.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_aggregation",
                                        ));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "aggregation",
                                        &[
                                            "id",
                                            "extension",
                                            "code",
                                            "profile",
                                            "targetProfile",
                                            "aggregation",
                                            "versioning",
                                        ],
                                    ));
                                }
                            }
                            Field::Versioning => {
                                if _ctx.from_json {
                                    let some = r#versioning.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "versioning",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#versioning.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "versioning",
                                        ));
                                    }
                                    r#versioning = Some(map_access.next_value()?);
                                }
                            }
                            Field::VersioningPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#versioning.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_versioning",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "versioning",
                                        &[
                                            "id",
                                            "extension",
                                            "code",
                                            "profile",
                                            "targetProfile",
                                            "aggregation",
                                            "versioning",
                                        ],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &[
                                        "id",
                                        "extension",
                                        "code",
                                        "profile",
                                        "targetProfile",
                                        "aggregation",
                                        "versioning",
                                    ],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionType {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#code: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#code.unwrap_or(Default::default())
                        } else {
                            r#code.ok_or(serde::de::Error::missing_field("code"))?
                        },
                        r#profile: r#profile.unwrap_or(vec![]),
                        r#target_profile: r#target_profile.unwrap_or(vec![]),
                        r#aggregation: r#aggregation.unwrap_or(vec![]),
                        r#versioning,
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "A sample value for this element demonstrating the type of information that would typically be found in the element."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionExample {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "Describes the purpose of this example amoung the set of examples."]
    pub r#label: super::super::types::String,
    #[doc = "The actual value for the element, which must be one of the types allowed for this element."]
    pub r#value: ElementDefinitionExampleValue,
}
impl serde::ser::Serialize for ElementDefinitionExample {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#label.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("label", &some)?;
                }
                if self.r#label.id.is_some() || !self.r#label.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#label.id.as_ref(),
                        extension: &self.r#label.extension,
                    };
                    state.serialize_entry("_label", &primitive_element)?;
                }
            } else {
                state.serialize_entry("label", &self.r#label)?;
            }
            match self.r#value {
                ElementDefinitionExampleValue::Base64Binary(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueBase64Binary", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueBase64Binary", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueBase64Binary", value)?;
                    }
                }
                ElementDefinitionExampleValue::Boolean(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueBoolean", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueBoolean", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueBoolean", value)?;
                    }
                }
                ElementDefinitionExampleValue::Canonical(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueCanonical", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueCanonical", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueCanonical", value)?;
                    }
                }
                ElementDefinitionExampleValue::Code(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueCode", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueCode", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueCode", value)?;
                    }
                }
                ElementDefinitionExampleValue::Date(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueDate", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueDate", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueDate", value)?;
                    }
                }
                ElementDefinitionExampleValue::DateTime(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueDateTime", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueDateTime", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueDateTime", value)?;
                    }
                }
                ElementDefinitionExampleValue::Decimal(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = some.parse::<serde_json::Number>().map_err(|_| {
                                serde::ser::Error::custom("error serializing decimal")
                            })?;
                            state.serialize_entry("valueDecimal", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueDecimal", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueDecimal", value)?;
                    }
                }
                ElementDefinitionExampleValue::Id(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueId", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueId", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueId", value)?;
                    }
                }
                ElementDefinitionExampleValue::Instant(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueInstant", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueInstant", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueInstant", value)?;
                    }
                }
                ElementDefinitionExampleValue::Integer(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueInteger", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueInteger", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueInteger", value)?;
                    }
                }
                ElementDefinitionExampleValue::Markdown(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueMarkdown", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueMarkdown", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueMarkdown", value)?;
                    }
                }
                ElementDefinitionExampleValue::Oid(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueOid", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueOid", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueOid", value)?;
                    }
                }
                ElementDefinitionExampleValue::PositiveInt(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valuePositiveInt", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valuePositiveInt", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valuePositiveInt", value)?;
                    }
                }
                ElementDefinitionExampleValue::String(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueString", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueString", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueString", value)?;
                    }
                }
                ElementDefinitionExampleValue::Time(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueTime", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueTime", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueTime", value)?;
                    }
                }
                ElementDefinitionExampleValue::UnsignedInt(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueUnsignedInt", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueUnsignedInt", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueUnsignedInt", value)?;
                    }
                }
                ElementDefinitionExampleValue::Uri(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueUri", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueUri", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueUri", value)?;
                    }
                }
                ElementDefinitionExampleValue::Url(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueUrl", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueUrl", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueUrl", value)?;
                    }
                }
                ElementDefinitionExampleValue::Uuid(ref value) => {
                    if _ctx.output_json {
                        if let Some(some) = value.value.as_ref() {
                            let some = Ok(some)?;
                            state.serialize_entry("valueUuid", &some)?;
                        }
                        if value.id.is_some() || !value.extension.is_empty() {
                            let primitive_element = super::super::serde_helpers::PrimitiveElement {
                                id: value.id.as_ref(),
                                extension: &value.extension,
                            };
                            state.serialize_entry("_valueUuid", &primitive_element)?;
                        }
                    } else {
                        state.serialize_entry("valueUuid", value)?;
                    }
                }
                ElementDefinitionExampleValue::Address(ref value) => {
                    state.serialize_entry("valueAddress", value)?;
                }
                ElementDefinitionExampleValue::Age(ref value) => {
                    state.serialize_entry("valueAge", value)?;
                }
                ElementDefinitionExampleValue::Annotation(ref value) => {
                    state.serialize_entry("valueAnnotation", value)?;
                }
                ElementDefinitionExampleValue::Attachment(ref value) => {
                    state.serialize_entry("valueAttachment", value)?;
                }
                ElementDefinitionExampleValue::CodeableConcept(ref value) => {
                    state.serialize_entry("valueCodeableConcept", value)?;
                }
                ElementDefinitionExampleValue::CodeableReference(ref value) => {
                    state.serialize_entry("valueCodeableReference", value)?;
                }
                ElementDefinitionExampleValue::Coding(ref value) => {
                    state.serialize_entry("valueCoding", value)?;
                }
                ElementDefinitionExampleValue::ContactPoint(ref value) => {
                    state.serialize_entry("valueContactPoint", value)?;
                }
                ElementDefinitionExampleValue::Count(ref value) => {
                    state.serialize_entry("valueCount", value)?;
                }
                ElementDefinitionExampleValue::Distance(ref value) => {
                    state.serialize_entry("valueDistance", value)?;
                }
                ElementDefinitionExampleValue::Duration(ref value) => {
                    state.serialize_entry("valueDuration", value)?;
                }
                ElementDefinitionExampleValue::HumanName(ref value) => {
                    state.serialize_entry("valueHumanName", value)?;
                }
                ElementDefinitionExampleValue::Identifier(ref value) => {
                    state.serialize_entry("valueIdentifier", value)?;
                }
                ElementDefinitionExampleValue::Money(ref value) => {
                    state.serialize_entry("valueMoney", value)?;
                }
                ElementDefinitionExampleValue::Period(ref value) => {
                    state.serialize_entry("valuePeriod", value)?;
                }
                ElementDefinitionExampleValue::Quantity(ref value) => {
                    state.serialize_entry("valueQuantity", value)?;
                }
                ElementDefinitionExampleValue::Range(ref value) => {
                    state.serialize_entry("valueRange", value)?;
                }
                ElementDefinitionExampleValue::Ratio(ref value) => {
                    state.serialize_entry("valueRatio", value)?;
                }
                ElementDefinitionExampleValue::RatioRange(ref value) => {
                    state.serialize_entry("valueRatioRange", value)?;
                }
                ElementDefinitionExampleValue::Reference(ref value) => {
                    state.serialize_entry("valueReference", value)?;
                }
                ElementDefinitionExampleValue::SampledData(ref value) => {
                    state.serialize_entry("valueSampledData", value)?;
                }
                ElementDefinitionExampleValue::Signature(ref value) => {
                    state.serialize_entry("valueSignature", value)?;
                }
                ElementDefinitionExampleValue::Timing(ref value) => {
                    state.serialize_entry("valueTiming", value)?;
                }
                ElementDefinitionExampleValue::ContactDetail(ref value) => {
                    state.serialize_entry("valueContactDetail", value)?;
                }
                ElementDefinitionExampleValue::Contributor(ref value) => {
                    state.serialize_entry("valueContributor", value)?;
                }
                ElementDefinitionExampleValue::DataRequirement(ref value) => {
                    state.serialize_entry("valueDataRequirement", value)?;
                }
                ElementDefinitionExampleValue::Expression(ref value) => {
                    state.serialize_entry("valueExpression", value)?;
                }
                ElementDefinitionExampleValue::ParameterDefinition(ref value) => {
                    state.serialize_entry("valueParameterDefinition", value)?;
                }
                ElementDefinitionExampleValue::RelatedArtifact(ref value) => {
                    state.serialize_entry("valueRelatedArtifact", value)?;
                }
                ElementDefinitionExampleValue::TriggerDefinition(ref value) => {
                    state.serialize_entry("valueTriggerDefinition", value)?;
                }
                ElementDefinitionExampleValue::UsageContext(ref value) => {
                    state.serialize_entry("valueUsageContext", value)?;
                }
                ElementDefinitionExampleValue::Dosage(ref value) => {
                    state.serialize_entry("valueDosage", value)?;
                }
                ElementDefinitionExampleValue::Invalid => {
                    return Err(serde::ser::Error::custom("value is a required field"))
                }
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionExample {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "label")]
            Label,
            #[serde(rename = "_label")]
            LabelPrimitiveElement,
            #[serde(rename = "valueBase64Binary")]
            ValueBase64Binary,
            #[serde(rename = "_valueBase64Binary")]
            ValueBase64BinaryPrimitiveElement,
            #[serde(rename = "valueBoolean")]
            ValueBoolean,
            #[serde(rename = "_valueBoolean")]
            ValueBooleanPrimitiveElement,
            #[serde(rename = "valueCanonical")]
            ValueCanonical,
            #[serde(rename = "_valueCanonical")]
            ValueCanonicalPrimitiveElement,
            #[serde(rename = "valueCode")]
            ValueCode,
            #[serde(rename = "_valueCode")]
            ValueCodePrimitiveElement,
            #[serde(rename = "valueDate")]
            ValueDate,
            #[serde(rename = "_valueDate")]
            ValueDatePrimitiveElement,
            #[serde(rename = "valueDateTime")]
            ValueDateTime,
            #[serde(rename = "_valueDateTime")]
            ValueDateTimePrimitiveElement,
            #[serde(rename = "valueDecimal")]
            ValueDecimal,
            #[serde(rename = "_valueDecimal")]
            ValueDecimalPrimitiveElement,
            #[serde(rename = "valueId")]
            ValueId,
            #[serde(rename = "_valueId")]
            ValueIdPrimitiveElement,
            #[serde(rename = "valueInstant")]
            ValueInstant,
            #[serde(rename = "_valueInstant")]
            ValueInstantPrimitiveElement,
            #[serde(rename = "valueInteger")]
            ValueInteger,
            #[serde(rename = "_valueInteger")]
            ValueIntegerPrimitiveElement,
            #[serde(rename = "valueMarkdown")]
            ValueMarkdown,
            #[serde(rename = "_valueMarkdown")]
            ValueMarkdownPrimitiveElement,
            #[serde(rename = "valueOid")]
            ValueOid,
            #[serde(rename = "_valueOid")]
            ValueOidPrimitiveElement,
            #[serde(rename = "valuePositiveInt")]
            ValuePositiveInt,
            #[serde(rename = "_valuePositiveInt")]
            ValuePositiveIntPrimitiveElement,
            #[serde(rename = "valueString")]
            ValueString,
            #[serde(rename = "_valueString")]
            ValueStringPrimitiveElement,
            #[serde(rename = "valueTime")]
            ValueTime,
            #[serde(rename = "_valueTime")]
            ValueTimePrimitiveElement,
            #[serde(rename = "valueUnsignedInt")]
            ValueUnsignedInt,
            #[serde(rename = "_valueUnsignedInt")]
            ValueUnsignedIntPrimitiveElement,
            #[serde(rename = "valueUri")]
            ValueUri,
            #[serde(rename = "_valueUri")]
            ValueUriPrimitiveElement,
            #[serde(rename = "valueUrl")]
            ValueUrl,
            #[serde(rename = "_valueUrl")]
            ValueUrlPrimitiveElement,
            #[serde(rename = "valueUuid")]
            ValueUuid,
            #[serde(rename = "_valueUuid")]
            ValueUuidPrimitiveElement,
            #[serde(rename = "valueAddress")]
            ValueAddress,
            #[serde(rename = "valueAge")]
            ValueAge,
            #[serde(rename = "valueAnnotation")]
            ValueAnnotation,
            #[serde(rename = "valueAttachment")]
            ValueAttachment,
            #[serde(rename = "valueCodeableConcept")]
            ValueCodeableConcept,
            #[serde(rename = "valueCodeableReference")]
            ValueCodeableReference,
            #[serde(rename = "valueCoding")]
            ValueCoding,
            #[serde(rename = "valueContactPoint")]
            ValueContactPoint,
            #[serde(rename = "valueCount")]
            ValueCount,
            #[serde(rename = "valueDistance")]
            ValueDistance,
            #[serde(rename = "valueDuration")]
            ValueDuration,
            #[serde(rename = "valueHumanName")]
            ValueHumanName,
            #[serde(rename = "valueIdentifier")]
            ValueIdentifier,
            #[serde(rename = "valueMoney")]
            ValueMoney,
            #[serde(rename = "valuePeriod")]
            ValuePeriod,
            #[serde(rename = "valueQuantity")]
            ValueQuantity,
            #[serde(rename = "valueRange")]
            ValueRange,
            #[serde(rename = "valueRatio")]
            ValueRatio,
            #[serde(rename = "valueRatioRange")]
            ValueRatioRange,
            #[serde(rename = "valueReference")]
            ValueReference,
            #[serde(rename = "valueSampledData")]
            ValueSampledData,
            #[serde(rename = "valueSignature")]
            ValueSignature,
            #[serde(rename = "valueTiming")]
            ValueTiming,
            #[serde(rename = "valueContactDetail")]
            ValueContactDetail,
            #[serde(rename = "valueContributor")]
            ValueContributor,
            #[serde(rename = "valueDataRequirement")]
            ValueDataRequirement,
            #[serde(rename = "valueExpression")]
            ValueExpression,
            #[serde(rename = "valueParameterDefinition")]
            ValueParameterDefinition,
            #[serde(rename = "valueRelatedArtifact")]
            ValueRelatedArtifact,
            #[serde(rename = "valueTriggerDefinition")]
            ValueTriggerDefinition,
            #[serde(rename = "valueUsageContext")]
            ValueUsageContext,
            #[serde(rename = "valueDosage")]
            ValueDosage,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionExample;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionExample")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionExample, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#label: Option<super::super::types::String> = None;
                let mut r#value: Option<ElementDefinitionExampleValue> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Label => {
                                if _ctx.from_json {
                                    let some = r#label.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("label"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#label.is_some() {
                                        return Err(serde::de::Error::duplicate_field("label"));
                                    }
                                    r#label = Some(map_access.next_value()?);
                                }
                            }
                            Field::LabelPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#label.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_label"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "label",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueBase64Binary => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Base64Binary(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::Base64Binary(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueBase64Binary",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueBase64Binary",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Base64Binary(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueBase64BinaryPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Base64Binary(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::Base64Binary(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueBase64Binary",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueBase64Binary",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueBoolean => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Boolean(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueBoolean",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueBoolean",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Boolean(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueBooleanPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Boolean(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueBoolean",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueBoolean",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueCanonical => {
                                if _ctx.from_json {
                                    let r#enum =
                                        r#value.get_or_insert(
                                            ElementDefinitionExampleValue::Canonical(
                                                Default::default(),
                                            ),
                                        );
                                    if let ElementDefinitionExampleValue::Canonical(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueCanonical",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueCanonical",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Canonical(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueCanonicalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum =
                                        r#value.get_or_insert(
                                            ElementDefinitionExampleValue::Canonical(
                                                Default::default(),
                                            ),
                                        );
                                    if let ElementDefinitionExampleValue::Canonical(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueCanonical",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueCanonical",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueCode => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Code(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Code(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueCode",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueCode"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Code(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueCodePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Code(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Code(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueCode",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueCode",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueDate => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueDate"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueDate",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::DateTime(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueDateTime",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::DateTime(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::DateTime(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Decimal(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueDecimal",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Decimal(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueId => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Id(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Id(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueId",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueId"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Id(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueIdPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Id(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Id(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueId",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueId",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Instant(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueInstant",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Instant(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Integer(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueInteger",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Integer(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueMarkdown => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Markdown(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueMarkdown",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueMarkdown",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Markdown(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueMarkdownPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Markdown(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueMarkdown",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueMarkdown",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueOid => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Oid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueOid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueOid"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Oid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueOidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Oid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueOid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueOid",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValuePositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::PositiveInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::PositiveInt(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valuePositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valuePositiveInt",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::PositiveInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValuePositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::PositiveInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::PositiveInt(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valuePositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valuePositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueString => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::String(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::String(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueString",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueString",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::String(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueStringPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::String(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::String(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueString",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueString",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueTime => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueTime"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueTime",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::UnsignedInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::UnsignedInt(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "valueUnsignedInt",
                                        ));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::UnsignedInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::UnsignedInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionExampleValue::UnsignedInt(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueUri => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Uri(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueUri",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueUri"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Uri(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueUriPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Uri(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueUri",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueUri",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueUrl => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Url(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Url(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueUrl",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueUrl"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Url(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueUrlPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Url(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Url(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueUrl",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueUrl",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueUuid => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Uuid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "valueUuid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("value[x]"));
                                    }
                                } else {
                                    if r#value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueUuid"));
                                    }
                                    r#value = Some(ElementDefinitionExampleValue::Uuid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::ValueUuidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#value.get_or_insert(
                                        ElementDefinitionExampleValue::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionExampleValue::Uuid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_valueUuid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_value[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueUuid",
                                        &[
                                            "id",
                                            "extension",
                                            "label",
                                            "valueBase64Binary",
                                            "valueBoolean",
                                            "valueCanonical",
                                            "valueCode",
                                            "valueDate",
                                            "valueDateTime",
                                            "valueDecimal",
                                            "valueId",
                                            "valueInstant",
                                            "valueInteger",
                                            "valueMarkdown",
                                            "valueOid",
                                            "valuePositiveInt",
                                            "valueString",
                                            "valueTime",
                                            "valueUnsignedInt",
                                            "valueUri",
                                            "valueUrl",
                                            "valueUuid",
                                            "valueAddress",
                                            "valueAge",
                                            "valueAnnotation",
                                            "valueAttachment",
                                            "valueCodeableConcept",
                                            "valueCodeableReference",
                                            "valueCoding",
                                            "valueContactPoint",
                                            "valueCount",
                                            "valueDistance",
                                            "valueDuration",
                                            "valueHumanName",
                                            "valueIdentifier",
                                            "valueMoney",
                                            "valuePeriod",
                                            "valueQuantity",
                                            "valueRange",
                                            "valueRatio",
                                            "valueRatioRange",
                                            "valueReference",
                                            "valueSampledData",
                                            "valueSignature",
                                            "valueTiming",
                                            "valueContactDetail",
                                            "valueContributor",
                                            "valueDataRequirement",
                                            "valueExpression",
                                            "valueParameterDefinition",
                                            "valueRelatedArtifact",
                                            "valueTriggerDefinition",
                                            "valueUsageContext",
                                            "valueDosage",
                                        ],
                                    ));
                                }
                            }
                            Field::ValueAddress => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueAddress"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Address(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueAge => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueAge"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Age(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueAnnotation => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueAnnotation",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Annotation(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueAttachment => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueAttachment",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Attachment(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueCodeableConcept => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueCodeableConcept",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::CodeableConcept(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueCodeableReference => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueCodeableReference",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::CodeableReference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueCoding => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueCoding"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Coding(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueContactPoint => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueContactPoint",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::ContactPoint(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueCount => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueCount"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Count(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueDistance => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueDistance"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Distance(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueDuration => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueDuration"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Duration(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueHumanName => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueHumanName",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::HumanName(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueIdentifier => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueIdentifier",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Identifier(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueMoney => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueMoney"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Money(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValuePeriod => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valuePeriod"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Period(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueQuantity => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueQuantity"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueRange => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueRange"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Range(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueRatio => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueRatio"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Ratio(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueRatioRange => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueRatioRange",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::RatioRange(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueReference => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueReference",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Reference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueSampledData => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueSampledData",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::SampledData(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueSignature => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueSignature",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Signature(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueTiming => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueTiming"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Timing(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueContactDetail => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueContactDetail",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::ContactDetail(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueContributor => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueContributor",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Contributor(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueDataRequirement => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueDataRequirement",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::DataRequirement(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueExpression => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueExpression",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Expression(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueParameterDefinition => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueParameterDefinition",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::ParameterDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueRelatedArtifact => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueRelatedArtifact",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::RelatedArtifact(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueTriggerDefinition => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueTriggerDefinition",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::TriggerDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueUsageContext => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "valueUsageContext",
                                    ));
                                }
                                r#value = Some(ElementDefinitionExampleValue::UsageContext(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::ValueDosage => {
                                if r#value.is_some() {
                                    return Err(serde::de::Error::duplicate_field("valueDosage"));
                                }
                                r#value = Some(ElementDefinitionExampleValue::Dosage(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &[
                                        "id",
                                        "extension",
                                        "label",
                                        "valueBase64Binary",
                                        "valueBoolean",
                                        "valueCanonical",
                                        "valueCode",
                                        "valueDate",
                                        "valueDateTime",
                                        "valueDecimal",
                                        "valueId",
                                        "valueInstant",
                                        "valueInteger",
                                        "valueMarkdown",
                                        "valueOid",
                                        "valuePositiveInt",
                                        "valueString",
                                        "valueTime",
                                        "valueUnsignedInt",
                                        "valueUri",
                                        "valueUrl",
                                        "valueUuid",
                                        "valueAddress",
                                        "valueAge",
                                        "valueAnnotation",
                                        "valueAttachment",
                                        "valueCodeableConcept",
                                        "valueCodeableReference",
                                        "valueCoding",
                                        "valueContactPoint",
                                        "valueCount",
                                        "valueDistance",
                                        "valueDuration",
                                        "valueHumanName",
                                        "valueIdentifier",
                                        "valueMoney",
                                        "valuePeriod",
                                        "valueQuantity",
                                        "valueRange",
                                        "valueRatio",
                                        "valueRatioRange",
                                        "valueReference",
                                        "valueSampledData",
                                        "valueSignature",
                                        "valueTiming",
                                        "valueContactDetail",
                                        "valueContributor",
                                        "valueDataRequirement",
                                        "valueExpression",
                                        "valueParameterDefinition",
                                        "valueRelatedArtifact",
                                        "valueTriggerDefinition",
                                        "valueUsageContext",
                                        "valueDosage",
                                    ],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionExample {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#label: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#label.unwrap_or(Default::default())
                        } else {
                            r#label.ok_or(serde::de::Error::missing_field("label"))?
                        },
                        r#value: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#value.unwrap_or(Default::default())
                        } else {
                            r#value.ok_or(serde::de::Error::missing_field("value[x]"))?
                        },
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionConstraint {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality."]
    pub r#key: super::super::types::Id,
    #[doc = "Description of why this constraint is necessary or appropriate."]
    pub r#requirements: Option<super::super::types::String>,
    #[doc = "Identifies the impact constraint violation has on the conformance of the instance."]
    pub r#severity: super::super::types::Code,
    #[doc = "Text that can be used to describe the constraint in messages identifying that the constraint has been violated."]
    pub r#human: super::super::types::String,
    #[doc = "A [FHIRPath](https://hl7.org/FHIR/fhirpath.html)) expression of constraint that can be executed to see if this constraint is met."]
    pub r#expression: Option<super::super::types::String>,
    #[doc = "An XPath expression of constraint that can be executed to see if this constraint is met."]
    pub r#xpath: Option<super::super::types::String>,
    #[doc = "A reference to the original source of the constraint, for traceability purposes."]
    pub r#source: Option<super::super::types::Canonical>,
}
impl serde::ser::Serialize for ElementDefinitionConstraint {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#key.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("key", &some)?;
                }
                if self.r#key.id.is_some() || !self.r#key.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#key.id.as_ref(),
                        extension: &self.r#key.extension,
                    };
                    state.serialize_entry("_key", &primitive_element)?;
                }
            } else {
                state.serialize_entry("key", &self.r#key)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#requirements.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("requirements", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_requirements", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#requirements.as_ref() {
                    state.serialize_entry("requirements", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#severity.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("severity", &some)?;
                }
                if self.r#severity.id.is_some() || !self.r#severity.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#severity.id.as_ref(),
                        extension: &self.r#severity.extension,
                    };
                    state.serialize_entry("_severity", &primitive_element)?;
                }
            } else {
                state.serialize_entry("severity", &self.r#severity)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#human.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("human", &some)?;
                }
                if self.r#human.id.is_some() || !self.r#human.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#human.id.as_ref(),
                        extension: &self.r#human.extension,
                    };
                    state.serialize_entry("_human", &primitive_element)?;
                }
            } else {
                state.serialize_entry("human", &self.r#human)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#expression.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("expression", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_expression", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#expression.as_ref() {
                    state.serialize_entry("expression", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#xpath.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("xpath", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_xpath", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#xpath.as_ref() {
                    state.serialize_entry("xpath", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#source.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("source", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_source", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#source.as_ref() {
                    state.serialize_entry("source", some)?;
                }
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionConstraint {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "key")]
            Key,
            #[serde(rename = "_key")]
            KeyPrimitiveElement,
            #[serde(rename = "requirements")]
            Requirements,
            #[serde(rename = "_requirements")]
            RequirementsPrimitiveElement,
            #[serde(rename = "severity")]
            Severity,
            #[serde(rename = "_severity")]
            SeverityPrimitiveElement,
            #[serde(rename = "human")]
            Human,
            #[serde(rename = "_human")]
            HumanPrimitiveElement,
            #[serde(rename = "expression")]
            Expression,
            #[serde(rename = "_expression")]
            ExpressionPrimitiveElement,
            #[serde(rename = "xpath")]
            Xpath,
            #[serde(rename = "_xpath")]
            XpathPrimitiveElement,
            #[serde(rename = "source")]
            Source,
            #[serde(rename = "_source")]
            SourcePrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionConstraint;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionConstraint")
            }
            fn visit_map<V>(
                self,
                mut map_access: V,
            ) -> Result<ElementDefinitionConstraint, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#key: Option<super::super::types::Id> = None;
                let mut r#requirements: Option<super::super::types::String> = None;
                let mut r#severity: Option<super::super::types::Code> = None;
                let mut r#human: Option<super::super::types::String> = None;
                let mut r#expression: Option<super::super::types::String> = None;
                let mut r#xpath: Option<super::super::types::String> = None;
                let mut r#source: Option<super::super::types::Canonical> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Key => {
                                if _ctx.from_json {
                                    let some = r#key.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("key"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#key.is_some() {
                                        return Err(serde::de::Error::duplicate_field("key"));
                                    }
                                    r#key = Some(map_access.next_value()?);
                                }
                            }
                            Field::KeyPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#key.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_key"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "key",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Requirements => {
                                if _ctx.from_json {
                                    let some = r#requirements.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "requirements",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#requirements.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "requirements",
                                        ));
                                    }
                                    r#requirements = Some(map_access.next_value()?);
                                }
                            }
                            Field::RequirementsPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#requirements.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_requirements",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "requirements",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Severity => {
                                if _ctx.from_json {
                                    let some = r#severity.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("severity"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#severity.is_some() {
                                        return Err(serde::de::Error::duplicate_field("severity"));
                                    }
                                    r#severity = Some(map_access.next_value()?);
                                }
                            }
                            Field::SeverityPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#severity.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_severity"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "severity",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Human => {
                                if _ctx.from_json {
                                    let some = r#human.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("human"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#human.is_some() {
                                        return Err(serde::de::Error::duplicate_field("human"));
                                    }
                                    r#human = Some(map_access.next_value()?);
                                }
                            }
                            Field::HumanPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#human.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_human"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "human",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Expression => {
                                if _ctx.from_json {
                                    let some = r#expression.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "expression",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#expression.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "expression",
                                        ));
                                    }
                                    r#expression = Some(map_access.next_value()?);
                                }
                            }
                            Field::ExpressionPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#expression.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_expression",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "expression",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Xpath => {
                                if _ctx.from_json {
                                    let some = r#xpath.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("xpath"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#xpath.is_some() {
                                        return Err(serde::de::Error::duplicate_field("xpath"));
                                    }
                                    r#xpath = Some(map_access.next_value()?);
                                }
                            }
                            Field::XpathPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#xpath.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_xpath"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "xpath",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Source => {
                                if _ctx.from_json {
                                    let some = r#source.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("source"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#source.is_some() {
                                        return Err(serde::de::Error::duplicate_field("source"));
                                    }
                                    r#source = Some(map_access.next_value()?);
                                }
                            }
                            Field::SourcePrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#source.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_source"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "source",
                                        &[
                                            "id",
                                            "extension",
                                            "key",
                                            "requirements",
                                            "severity",
                                            "human",
                                            "expression",
                                            "xpath",
                                            "source",
                                        ],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &[
                                        "id",
                                        "extension",
                                        "key",
                                        "requirements",
                                        "severity",
                                        "human",
                                        "expression",
                                        "xpath",
                                        "source",
                                    ],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionConstraint {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#key: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#key.unwrap_or(Default::default())
                        } else {
                            r#key.ok_or(serde::de::Error::missing_field("key"))?
                        },
                        r#requirements,
                        r#severity: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#severity.unwrap_or(Default::default())
                        } else {
                            r#severity.ok_or(serde::de::Error::missing_field("severity"))?
                        },
                        r#human: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#human.unwrap_or(Default::default())
                        } else {
                            r#human.ok_or(serde::de::Error::missing_field("human"))?
                        },
                        r#expression,
                        r#xpath,
                        r#source,
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri)."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionBinding {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances."]
    pub r#strength: super::super::types::Code,
    #[doc = "Describes the intended use of this particular set of codes."]
    pub r#description: Option<super::super::types::String>,
    #[doc = "Refers to the value set that identifies the set of codes the binding refers to."]
    pub r#value_set: Option<super::super::types::Canonical>,
}
impl serde::ser::Serialize for ElementDefinitionBinding {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#strength.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("strength", &some)?;
                }
                if self.r#strength.id.is_some() || !self.r#strength.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#strength.id.as_ref(),
                        extension: &self.r#strength.extension,
                    };
                    state.serialize_entry("_strength", &primitive_element)?;
                }
            } else {
                state.serialize_entry("strength", &self.r#strength)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#description.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("description", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_description", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#description.as_ref() {
                    state.serialize_entry("description", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#value_set.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("valueSet", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_valueSet", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#value_set.as_ref() {
                    state.serialize_entry("valueSet", some)?;
                }
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionBinding {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "strength")]
            Strength,
            #[serde(rename = "_strength")]
            StrengthPrimitiveElement,
            #[serde(rename = "description")]
            Description,
            #[serde(rename = "_description")]
            DescriptionPrimitiveElement,
            #[serde(rename = "valueSet")]
            ValueSet,
            #[serde(rename = "_valueSet")]
            ValueSetPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionBinding;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionBinding")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionBinding, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#strength: Option<super::super::types::Code> = None;
                let mut r#description: Option<super::super::types::String> = None;
                let mut r#value_set: Option<super::super::types::Canonical> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Strength => {
                                if _ctx.from_json {
                                    let some = r#strength.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("strength"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#strength.is_some() {
                                        return Err(serde::de::Error::duplicate_field("strength"));
                                    }
                                    r#strength = Some(map_access.next_value()?);
                                }
                            }
                            Field::StrengthPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#strength.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_strength"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "strength",
                                        &["id", "extension", "strength", "description", "valueSet"],
                                    ));
                                }
                            }
                            Field::Description => {
                                if _ctx.from_json {
                                    let some = r#description.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "description",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#description.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "description",
                                        ));
                                    }
                                    r#description = Some(map_access.next_value()?);
                                }
                            }
                            Field::DescriptionPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#description.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_description",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "description",
                                        &["id", "extension", "strength", "description", "valueSet"],
                                    ));
                                }
                            }
                            Field::ValueSet => {
                                if _ctx.from_json {
                                    let some = r#value_set.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueSet"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#value_set.is_some() {
                                        return Err(serde::de::Error::duplicate_field("valueSet"));
                                    }
                                    r#value_set = Some(map_access.next_value()?);
                                }
                            }
                            Field::ValueSetPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#value_set.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_valueSet"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "valueSet",
                                        &["id", "extension", "strength", "description", "valueSet"],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &["id", "extension", "strength", "description", "valueSet"],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionBinding {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#strength: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#strength.unwrap_or(Default::default())
                        } else {
                            r#strength.ok_or(serde::de::Error::missing_field("strength"))?
                        },
                        r#description,
                        r#value_set,
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Identifies a concept from an external specification that roughly corresponds to this element."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinitionMapping {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "An internal reference to the definition of a mapping."]
    pub r#identity: super::super::types::Id,
    #[doc = "Identifies the computable language in which mapping.map is expressed."]
    pub r#language: Option<super::super::types::Code>,
    #[doc = "Expresses what part of the target specification corresponds to this element."]
    pub r#map: super::super::types::String,
    #[doc = "Comments that provide information about the mapping or its use."]
    pub r#comment: Option<super::super::types::String>,
}
impl serde::ser::Serialize for ElementDefinitionMapping {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#identity.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("identity", &some)?;
                }
                if self.r#identity.id.is_some() || !self.r#identity.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#identity.id.as_ref(),
                        extension: &self.r#identity.extension,
                    };
                    state.serialize_entry("_identity", &primitive_element)?;
                }
            } else {
                state.serialize_entry("identity", &self.r#identity)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#language.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("language", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_language", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#language.as_ref() {
                    state.serialize_entry("language", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#map.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("map", &some)?;
                }
                if self.r#map.id.is_some() || !self.r#map.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#map.id.as_ref(),
                        extension: &self.r#map.extension,
                    };
                    state.serialize_entry("_map", &primitive_element)?;
                }
            } else {
                state.serialize_entry("map", &self.r#map)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#comment.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("comment", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_comment", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#comment.as_ref() {
                    state.serialize_entry("comment", some)?;
                }
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinitionMapping {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "identity")]
            Identity,
            #[serde(rename = "_identity")]
            IdentityPrimitiveElement,
            #[serde(rename = "language")]
            Language,
            #[serde(rename = "_language")]
            LanguagePrimitiveElement,
            #[serde(rename = "map")]
            Map,
            #[serde(rename = "_map")]
            MapPrimitiveElement,
            #[serde(rename = "comment")]
            Comment,
            #[serde(rename = "_comment")]
            CommentPrimitiveElement,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinitionMapping;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinitionMapping")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinitionMapping, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#identity: Option<super::super::types::Id> = None;
                let mut r#language: Option<super::super::types::Code> = None;
                let mut r#map: Option<super::super::types::String> = None;
                let mut r#comment: Option<super::super::types::String> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::Identity => {
                                if _ctx.from_json {
                                    let some = r#identity.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("identity"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#identity.is_some() {
                                        return Err(serde::de::Error::duplicate_field("identity"));
                                    }
                                    r#identity = Some(map_access.next_value()?);
                                }
                            }
                            Field::IdentityPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#identity.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_identity"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "identity",
                                        &[
                                            "id",
                                            "extension",
                                            "identity",
                                            "language",
                                            "map",
                                            "comment",
                                        ],
                                    ));
                                }
                            }
                            Field::Language => {
                                if _ctx.from_json {
                                    let some = r#language.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("language"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#language.is_some() {
                                        return Err(serde::de::Error::duplicate_field("language"));
                                    }
                                    r#language = Some(map_access.next_value()?);
                                }
                            }
                            Field::LanguagePrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#language.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_language"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "language",
                                        &[
                                            "id",
                                            "extension",
                                            "identity",
                                            "language",
                                            "map",
                                            "comment",
                                        ],
                                    ));
                                }
                            }
                            Field::Map => {
                                if _ctx.from_json {
                                    let some = r#map.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("map"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#map.is_some() {
                                        return Err(serde::de::Error::duplicate_field("map"));
                                    }
                                    r#map = Some(map_access.next_value()?);
                                }
                            }
                            Field::MapPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#map.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_map"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "map",
                                        &[
                                            "id",
                                            "extension",
                                            "identity",
                                            "language",
                                            "map",
                                            "comment",
                                        ],
                                    ));
                                }
                            }
                            Field::Comment => {
                                if _ctx.from_json {
                                    let some = r#comment.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("comment"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#comment.is_some() {
                                        return Err(serde::de::Error::duplicate_field("comment"));
                                    }
                                    r#comment = Some(map_access.next_value()?);
                                }
                            }
                            Field::CommentPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#comment.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_comment"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "comment",
                                        &[
                                            "id",
                                            "extension",
                                            "identity",
                                            "language",
                                            "map",
                                            "comment",
                                        ],
                                    ));
                                }
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &["id", "extension", "identity", "language", "map", "comment"],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinitionMapping {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#identity: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#identity.unwrap_or(Default::default())
                        } else {
                            r#identity.ok_or(serde::de::Error::missing_field("identity"))?
                        },
                        r#language,
                        r#map: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#map.unwrap_or(Default::default())
                        } else {
                            r#map.ok_or(serde::de::Error::missing_field("map"))?
                        },
                        r#comment,
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
#[doc = "Base StructureDefinition for ElementDefinition Type: Captures constraints on each element within the resource, profile, or extension."]
#[derive(Default, Debug, Clone)]
pub struct ElementDefinition {
    #[doc = "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."]
    pub r#id: Option<std::string::String>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."]
    pub r#extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."]
    pub r#modifier_extension: Vec<Box<super::super::types::Extension>>,
    #[doc = "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension."]
    pub r#path: super::super::types::String,
    #[doc = "Codes that define how this element is represented in instances, when the deviation varies from the normal case."]
    pub r#representation: Vec<super::super::types::Code>,
    #[doc = "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element."]
    pub r#slice_name: Option<super::super::types::String>,
    #[doc = "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName."]
    pub r#slice_is_constraining: Option<super::super::types::Boolean>,
    #[doc = "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form."]
    pub r#label: Option<super::super::types::String>,
    #[doc = "A code that has the same meaning as the element in a particular terminology."]
    pub r#code: Vec<Box<super::super::types::Coding>>,
    #[doc = "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set)."]
    pub r#slicing: Option<ElementDefinitionSlicing>,
    #[doc = "A concise description of what this element means (e.g. for use in autogenerated summaries)."]
    pub r#short: Option<super::super::types::String>,
    #[doc = "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition)."]
    pub r#definition: Option<super::super::types::Markdown>,
    #[doc = "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment)."]
    pub r#comment: Option<super::super::types::Markdown>,
    #[doc = "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element."]
    pub r#requirements: Option<super::super::types::Markdown>,
    #[doc = "Identifies additional names by which this element might also be known."]
    pub r#alias: Vec<super::super::types::String>,
    #[doc = "The minimum number of times this element SHALL appear in the instance."]
    pub r#min: Option<super::super::types::UnsignedInt>,
    #[doc = "The maximum number of times this element is permitted to appear in the instance."]
    pub r#max: Option<super::super::types::String>,
    #[doc = "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same."]
    pub r#base: Option<ElementDefinitionBase>,
    #[doc = "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc."]
    pub r#content_reference: Option<super::super::types::Uri>,
    #[doc = "The data type or resource that the value of this element is permitted to be."]
    pub r#type: Vec<ElementDefinitionType>,
    #[doc = "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."]
    pub r#default_value: Option<ElementDefinitionDefaultValue>,
    #[doc = "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing')."]
    pub r#meaning_when_missing: Option<super::super::types::Markdown>,
    #[doc = "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning."]
    pub r#order_meaning: Option<super::super::types::String>,
    #[doc = "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."]
    pub r#fixed: Option<ElementDefinitionFixed>,
    #[doc = "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern\\[x\\] is used to constrain a primitive, it means that the value provided in the pattern\\[x\\] must match the instance value exactly.\n\nWhen pattern\\[x\\] is used to constrain an array, it means that each element provided in the pattern\\[x\\] array must (recursively) match at least one element from the instance array.\n\nWhen pattern\\[x\\] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."]
    pub r#pattern: Option<ElementDefinitionPattern>,
    #[doc = "A sample value for this element demonstrating the type of information that would typically be found in the element."]
    pub r#example: Vec<ElementDefinitionExample>,
    #[doc = "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."]
    pub r#min_value: Option<ElementDefinitionMinValue>,
    #[doc = "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."]
    pub r#max_value: Option<ElementDefinitionMaxValue>,
    #[doc = "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element."]
    pub r#max_length: Option<super::super::types::Integer>,
    #[doc = "A reference to an invariant that may make additional statements about the cardinality or value in the instance."]
    pub r#condition: Vec<super::super::types::Id>,
    #[doc = "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance."]
    pub r#constraint: Vec<ElementDefinitionConstraint>,
    #[doc = "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation."]
    pub r#must_support: Option<super::super::types::Boolean>,
    #[doc = "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system."]
    pub r#is_modifier: Option<super::super::types::Boolean>,
    #[doc = "Explains how that element affects the interpretation of the resource or element that contains it."]
    pub r#is_modifier_reason: Option<super::super::types::String>,
    #[doc = "Whether the element should be included if a client requests a search with the parameter _summary=true."]
    pub r#is_summary: Option<super::super::types::Boolean>,
    #[doc = "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri)."]
    pub r#binding: Option<ElementDefinitionBinding>,
    #[doc = "Identifies a concept from an external specification that roughly corresponds to this element."]
    pub r#mapping: Vec<ElementDefinitionMapping>,
}
impl serde::ser::Serialize for ElementDefinition {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        fhirbolt_shared::serde_context::ser::SERIALIZATION_CONTEXT.with(|_ctx| {
            let _ctx = _ctx.borrow();
            let mut state = serializer.serialize_map(None)?;
            if let Some(some) = self.r#id.as_ref() {
                state.serialize_entry("id", some)?;
            }
            if !self.r#extension.is_empty() {
                state.serialize_entry("extension", &self.r#extension)?;
            }
            if !self.r#modifier_extension.is_empty() {
                state.serialize_entry("modifierExtension", &self.r#modifier_extension)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#path.value.as_ref() {
                    let some = Ok(some)?;
                    state.serialize_entry("path", &some)?;
                }
                if self.r#path.id.is_some() || !self.r#path.extension.is_empty() {
                    let primitive_element = super::super::serde_helpers::PrimitiveElement {
                        id: self.r#path.id.as_ref(),
                        extension: &self.r#path.extension,
                    };
                    state.serialize_entry("_path", &primitive_element)?;
                }
            } else {
                state.serialize_entry("path", &self.r#path)?;
            }
            if _ctx.output_json {
                if !self.r#representation.is_empty() {
                    let values = self
                        .r#representation
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("representation", &values)?;
                    }
                    let requires_elements = self
                        .r#representation
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#representation
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_representation", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#representation.is_empty() {
                    state.serialize_entry("representation", &self.r#representation)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#slice_name.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("sliceName", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_sliceName", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#slice_name.as_ref() {
                    state.serialize_entry("sliceName", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#slice_is_constraining.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("sliceIsConstraining", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_sliceIsConstraining", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#slice_is_constraining.as_ref() {
                    state.serialize_entry("sliceIsConstraining", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#label.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("label", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_label", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#label.as_ref() {
                    state.serialize_entry("label", some)?;
                }
            }
            if !self.r#code.is_empty() {
                state.serialize_entry("code", &self.r#code)?;
            }
            if let Some(some) = self.r#slicing.as_ref() {
                state.serialize_entry("slicing", some)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#short.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("short", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_short", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#short.as_ref() {
                    state.serialize_entry("short", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#definition.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("definition", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_definition", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#definition.as_ref() {
                    state.serialize_entry("definition", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#comment.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("comment", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_comment", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#comment.as_ref() {
                    state.serialize_entry("comment", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#requirements.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("requirements", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_requirements", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#requirements.as_ref() {
                    state.serialize_entry("requirements", some)?;
                }
            }
            if _ctx.output_json {
                if !self.r#alias.is_empty() {
                    let values = self
                        .r#alias
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("alias", &values)?;
                    }
                    let requires_elements = self
                        .r#alias
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#alias
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_alias", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#alias.is_empty() {
                    state.serialize_entry("alias", &self.r#alias)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#min.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("min", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_min", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#min.as_ref() {
                    state.serialize_entry("min", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#max.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("max", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_max", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#max.as_ref() {
                    state.serialize_entry("max", some)?;
                }
            }
            if let Some(some) = self.r#base.as_ref() {
                state.serialize_entry("base", some)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#content_reference.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("contentReference", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_contentReference", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#content_reference.as_ref() {
                    state.serialize_entry("contentReference", some)?;
                }
            }
            if !self.r#type.is_empty() {
                state.serialize_entry("type", &self.r#type)?;
            }
            if let Some(some) = self.r#default_value.as_ref() {
                match some {
                    ElementDefinitionDefaultValue::Base64Binary(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueBase64Binary", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry(
                                    "_defaultValueBase64Binary",
                                    &primitive_element,
                                )?;
                            }
                        } else {
                            state.serialize_entry("defaultValueBase64Binary", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Boolean(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueBoolean", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueBoolean", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueBoolean", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Canonical(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueCanonical", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry(
                                    "_defaultValueCanonical",
                                    &primitive_element,
                                )?;
                            }
                        } else {
                            state.serialize_entry("defaultValueCanonical", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Code(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueCode", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueCode", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueCode", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Date(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueDate", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueDate", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueDate", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::DateTime(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueDateTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueDateTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueDateTime", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Decimal(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = some.parse::<serde_json::Number>().map_err(|_| {
                                    serde::ser::Error::custom("error serializing decimal")
                                })?;
                                state.serialize_entry("defaultValueDecimal", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueDecimal", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueDecimal", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Id(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueId", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueId", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueId", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Instant(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueInstant", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueInstant", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueInstant", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Integer(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueInteger", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueInteger", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueInteger", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Markdown(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueMarkdown", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_defaultValueMarkdown", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueMarkdown", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Oid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueOid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueOid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueOid", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::PositiveInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValuePositiveInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry(
                                    "_defaultValuePositiveInt",
                                    &primitive_element,
                                )?;
                            }
                        } else {
                            state.serialize_entry("defaultValuePositiveInt", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::String(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueString", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueString", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueString", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Time(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueTime", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::UnsignedInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueUnsignedInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry(
                                    "_defaultValueUnsignedInt",
                                    &primitive_element,
                                )?;
                            }
                        } else {
                            state.serialize_entry("defaultValueUnsignedInt", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Uri(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueUri", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueUri", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueUri", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Url(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueUrl", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueUrl", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueUrl", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Uuid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("defaultValueUuid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_defaultValueUuid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("defaultValueUuid", value)?;
                        }
                    }
                    ElementDefinitionDefaultValue::Address(ref value) => {
                        state.serialize_entry("defaultValueAddress", value)?;
                    }
                    ElementDefinitionDefaultValue::Age(ref value) => {
                        state.serialize_entry("defaultValueAge", value)?;
                    }
                    ElementDefinitionDefaultValue::Annotation(ref value) => {
                        state.serialize_entry("defaultValueAnnotation", value)?;
                    }
                    ElementDefinitionDefaultValue::Attachment(ref value) => {
                        state.serialize_entry("defaultValueAttachment", value)?;
                    }
                    ElementDefinitionDefaultValue::CodeableConcept(ref value) => {
                        state.serialize_entry("defaultValueCodeableConcept", value)?;
                    }
                    ElementDefinitionDefaultValue::CodeableReference(ref value) => {
                        state.serialize_entry("defaultValueCodeableReference", value)?;
                    }
                    ElementDefinitionDefaultValue::Coding(ref value) => {
                        state.serialize_entry("defaultValueCoding", value)?;
                    }
                    ElementDefinitionDefaultValue::ContactPoint(ref value) => {
                        state.serialize_entry("defaultValueContactPoint", value)?;
                    }
                    ElementDefinitionDefaultValue::Count(ref value) => {
                        state.serialize_entry("defaultValueCount", value)?;
                    }
                    ElementDefinitionDefaultValue::Distance(ref value) => {
                        state.serialize_entry("defaultValueDistance", value)?;
                    }
                    ElementDefinitionDefaultValue::Duration(ref value) => {
                        state.serialize_entry("defaultValueDuration", value)?;
                    }
                    ElementDefinitionDefaultValue::HumanName(ref value) => {
                        state.serialize_entry("defaultValueHumanName", value)?;
                    }
                    ElementDefinitionDefaultValue::Identifier(ref value) => {
                        state.serialize_entry("defaultValueIdentifier", value)?;
                    }
                    ElementDefinitionDefaultValue::Money(ref value) => {
                        state.serialize_entry("defaultValueMoney", value)?;
                    }
                    ElementDefinitionDefaultValue::Period(ref value) => {
                        state.serialize_entry("defaultValuePeriod", value)?;
                    }
                    ElementDefinitionDefaultValue::Quantity(ref value) => {
                        state.serialize_entry("defaultValueQuantity", value)?;
                    }
                    ElementDefinitionDefaultValue::Range(ref value) => {
                        state.serialize_entry("defaultValueRange", value)?;
                    }
                    ElementDefinitionDefaultValue::Ratio(ref value) => {
                        state.serialize_entry("defaultValueRatio", value)?;
                    }
                    ElementDefinitionDefaultValue::RatioRange(ref value) => {
                        state.serialize_entry("defaultValueRatioRange", value)?;
                    }
                    ElementDefinitionDefaultValue::Reference(ref value) => {
                        state.serialize_entry("defaultValueReference", value)?;
                    }
                    ElementDefinitionDefaultValue::SampledData(ref value) => {
                        state.serialize_entry("defaultValueSampledData", value)?;
                    }
                    ElementDefinitionDefaultValue::Signature(ref value) => {
                        state.serialize_entry("defaultValueSignature", value)?;
                    }
                    ElementDefinitionDefaultValue::Timing(ref value) => {
                        state.serialize_entry("defaultValueTiming", value)?;
                    }
                    ElementDefinitionDefaultValue::ContactDetail(ref value) => {
                        state.serialize_entry("defaultValueContactDetail", value)?;
                    }
                    ElementDefinitionDefaultValue::Contributor(ref value) => {
                        state.serialize_entry("defaultValueContributor", value)?;
                    }
                    ElementDefinitionDefaultValue::DataRequirement(ref value) => {
                        state.serialize_entry("defaultValueDataRequirement", value)?;
                    }
                    ElementDefinitionDefaultValue::Expression(ref value) => {
                        state.serialize_entry("defaultValueExpression", value)?;
                    }
                    ElementDefinitionDefaultValue::ParameterDefinition(ref value) => {
                        state.serialize_entry("defaultValueParameterDefinition", value)?;
                    }
                    ElementDefinitionDefaultValue::RelatedArtifact(ref value) => {
                        state.serialize_entry("defaultValueRelatedArtifact", value)?;
                    }
                    ElementDefinitionDefaultValue::TriggerDefinition(ref value) => {
                        state.serialize_entry("defaultValueTriggerDefinition", value)?;
                    }
                    ElementDefinitionDefaultValue::UsageContext(ref value) => {
                        state.serialize_entry("defaultValueUsageContext", value)?;
                    }
                    ElementDefinitionDefaultValue::Dosage(ref value) => {
                        state.serialize_entry("defaultValueDosage", value)?;
                    }
                    ElementDefinitionDefaultValue::Invalid => {
                        return Err(serde::ser::Error::custom("default_value is invalid"))
                    }
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#meaning_when_missing.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("meaningWhenMissing", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_meaningWhenMissing", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#meaning_when_missing.as_ref() {
                    state.serialize_entry("meaningWhenMissing", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#order_meaning.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("orderMeaning", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_orderMeaning", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#order_meaning.as_ref() {
                    state.serialize_entry("orderMeaning", some)?;
                }
            }
            if let Some(some) = self.r#fixed.as_ref() {
                match some {
                    ElementDefinitionFixed::Base64Binary(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedBase64Binary", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedBase64Binary", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedBase64Binary", value)?;
                        }
                    }
                    ElementDefinitionFixed::Boolean(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedBoolean", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedBoolean", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedBoolean", value)?;
                        }
                    }
                    ElementDefinitionFixed::Canonical(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedCanonical", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedCanonical", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedCanonical", value)?;
                        }
                    }
                    ElementDefinitionFixed::Code(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedCode", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedCode", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedCode", value)?;
                        }
                    }
                    ElementDefinitionFixed::Date(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedDate", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedDate", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedDate", value)?;
                        }
                    }
                    ElementDefinitionFixed::DateTime(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedDateTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedDateTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedDateTime", value)?;
                        }
                    }
                    ElementDefinitionFixed::Decimal(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = some.parse::<serde_json::Number>().map_err(|_| {
                                    serde::ser::Error::custom("error serializing decimal")
                                })?;
                                state.serialize_entry("fixedDecimal", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedDecimal", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedDecimal", value)?;
                        }
                    }
                    ElementDefinitionFixed::Id(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedId", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedId", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedId", value)?;
                        }
                    }
                    ElementDefinitionFixed::Instant(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedInstant", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedInstant", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedInstant", value)?;
                        }
                    }
                    ElementDefinitionFixed::Integer(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedInteger", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedInteger", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedInteger", value)?;
                        }
                    }
                    ElementDefinitionFixed::Markdown(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedMarkdown", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedMarkdown", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedMarkdown", value)?;
                        }
                    }
                    ElementDefinitionFixed::Oid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedOid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedOid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedOid", value)?;
                        }
                    }
                    ElementDefinitionFixed::PositiveInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedPositiveInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedPositiveInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedPositiveInt", value)?;
                        }
                    }
                    ElementDefinitionFixed::String(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedString", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedString", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedString", value)?;
                        }
                    }
                    ElementDefinitionFixed::Time(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedTime", value)?;
                        }
                    }
                    ElementDefinitionFixed::UnsignedInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedUnsignedInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedUnsignedInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedUnsignedInt", value)?;
                        }
                    }
                    ElementDefinitionFixed::Uri(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedUri", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedUri", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedUri", value)?;
                        }
                    }
                    ElementDefinitionFixed::Url(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedUrl", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedUrl", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedUrl", value)?;
                        }
                    }
                    ElementDefinitionFixed::Uuid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("fixedUuid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_fixedUuid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("fixedUuid", value)?;
                        }
                    }
                    ElementDefinitionFixed::Address(ref value) => {
                        state.serialize_entry("fixedAddress", value)?;
                    }
                    ElementDefinitionFixed::Age(ref value) => {
                        state.serialize_entry("fixedAge", value)?;
                    }
                    ElementDefinitionFixed::Annotation(ref value) => {
                        state.serialize_entry("fixedAnnotation", value)?;
                    }
                    ElementDefinitionFixed::Attachment(ref value) => {
                        state.serialize_entry("fixedAttachment", value)?;
                    }
                    ElementDefinitionFixed::CodeableConcept(ref value) => {
                        state.serialize_entry("fixedCodeableConcept", value)?;
                    }
                    ElementDefinitionFixed::CodeableReference(ref value) => {
                        state.serialize_entry("fixedCodeableReference", value)?;
                    }
                    ElementDefinitionFixed::Coding(ref value) => {
                        state.serialize_entry("fixedCoding", value)?;
                    }
                    ElementDefinitionFixed::ContactPoint(ref value) => {
                        state.serialize_entry("fixedContactPoint", value)?;
                    }
                    ElementDefinitionFixed::Count(ref value) => {
                        state.serialize_entry("fixedCount", value)?;
                    }
                    ElementDefinitionFixed::Distance(ref value) => {
                        state.serialize_entry("fixedDistance", value)?;
                    }
                    ElementDefinitionFixed::Duration(ref value) => {
                        state.serialize_entry("fixedDuration", value)?;
                    }
                    ElementDefinitionFixed::HumanName(ref value) => {
                        state.serialize_entry("fixedHumanName", value)?;
                    }
                    ElementDefinitionFixed::Identifier(ref value) => {
                        state.serialize_entry("fixedIdentifier", value)?;
                    }
                    ElementDefinitionFixed::Money(ref value) => {
                        state.serialize_entry("fixedMoney", value)?;
                    }
                    ElementDefinitionFixed::Period(ref value) => {
                        state.serialize_entry("fixedPeriod", value)?;
                    }
                    ElementDefinitionFixed::Quantity(ref value) => {
                        state.serialize_entry("fixedQuantity", value)?;
                    }
                    ElementDefinitionFixed::Range(ref value) => {
                        state.serialize_entry("fixedRange", value)?;
                    }
                    ElementDefinitionFixed::Ratio(ref value) => {
                        state.serialize_entry("fixedRatio", value)?;
                    }
                    ElementDefinitionFixed::RatioRange(ref value) => {
                        state.serialize_entry("fixedRatioRange", value)?;
                    }
                    ElementDefinitionFixed::Reference(ref value) => {
                        state.serialize_entry("fixedReference", value)?;
                    }
                    ElementDefinitionFixed::SampledData(ref value) => {
                        state.serialize_entry("fixedSampledData", value)?;
                    }
                    ElementDefinitionFixed::Signature(ref value) => {
                        state.serialize_entry("fixedSignature", value)?;
                    }
                    ElementDefinitionFixed::Timing(ref value) => {
                        state.serialize_entry("fixedTiming", value)?;
                    }
                    ElementDefinitionFixed::ContactDetail(ref value) => {
                        state.serialize_entry("fixedContactDetail", value)?;
                    }
                    ElementDefinitionFixed::Contributor(ref value) => {
                        state.serialize_entry("fixedContributor", value)?;
                    }
                    ElementDefinitionFixed::DataRequirement(ref value) => {
                        state.serialize_entry("fixedDataRequirement", value)?;
                    }
                    ElementDefinitionFixed::Expression(ref value) => {
                        state.serialize_entry("fixedExpression", value)?;
                    }
                    ElementDefinitionFixed::ParameterDefinition(ref value) => {
                        state.serialize_entry("fixedParameterDefinition", value)?;
                    }
                    ElementDefinitionFixed::RelatedArtifact(ref value) => {
                        state.serialize_entry("fixedRelatedArtifact", value)?;
                    }
                    ElementDefinitionFixed::TriggerDefinition(ref value) => {
                        state.serialize_entry("fixedTriggerDefinition", value)?;
                    }
                    ElementDefinitionFixed::UsageContext(ref value) => {
                        state.serialize_entry("fixedUsageContext", value)?;
                    }
                    ElementDefinitionFixed::Dosage(ref value) => {
                        state.serialize_entry("fixedDosage", value)?;
                    }
                    ElementDefinitionFixed::Invalid => {
                        return Err(serde::ser::Error::custom("fixed is invalid"))
                    }
                }
            }
            if let Some(some) = self.r#pattern.as_ref() {
                match some {
                    ElementDefinitionPattern::Base64Binary(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternBase64Binary", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_patternBase64Binary", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternBase64Binary", value)?;
                        }
                    }
                    ElementDefinitionPattern::Boolean(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternBoolean", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternBoolean", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternBoolean", value)?;
                        }
                    }
                    ElementDefinitionPattern::Canonical(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternCanonical", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternCanonical", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternCanonical", value)?;
                        }
                    }
                    ElementDefinitionPattern::Code(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternCode", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternCode", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternCode", value)?;
                        }
                    }
                    ElementDefinitionPattern::Date(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternDate", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternDate", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternDate", value)?;
                        }
                    }
                    ElementDefinitionPattern::DateTime(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternDateTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternDateTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternDateTime", value)?;
                        }
                    }
                    ElementDefinitionPattern::Decimal(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = some.parse::<serde_json::Number>().map_err(|_| {
                                    serde::ser::Error::custom("error serializing decimal")
                                })?;
                                state.serialize_entry("patternDecimal", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternDecimal", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternDecimal", value)?;
                        }
                    }
                    ElementDefinitionPattern::Id(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternId", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternId", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternId", value)?;
                        }
                    }
                    ElementDefinitionPattern::Instant(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternInstant", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternInstant", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternInstant", value)?;
                        }
                    }
                    ElementDefinitionPattern::Integer(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternInteger", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternInteger", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternInteger", value)?;
                        }
                    }
                    ElementDefinitionPattern::Markdown(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternMarkdown", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternMarkdown", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternMarkdown", value)?;
                        }
                    }
                    ElementDefinitionPattern::Oid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternOid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternOid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternOid", value)?;
                        }
                    }
                    ElementDefinitionPattern::PositiveInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternPositiveInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternPositiveInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternPositiveInt", value)?;
                        }
                    }
                    ElementDefinitionPattern::String(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternString", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternString", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternString", value)?;
                        }
                    }
                    ElementDefinitionPattern::Time(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternTime", value)?;
                        }
                    }
                    ElementDefinitionPattern::UnsignedInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternUnsignedInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternUnsignedInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternUnsignedInt", value)?;
                        }
                    }
                    ElementDefinitionPattern::Uri(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternUri", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternUri", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternUri", value)?;
                        }
                    }
                    ElementDefinitionPattern::Url(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternUrl", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternUrl", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternUrl", value)?;
                        }
                    }
                    ElementDefinitionPattern::Uuid(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("patternUuid", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_patternUuid", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("patternUuid", value)?;
                        }
                    }
                    ElementDefinitionPattern::Address(ref value) => {
                        state.serialize_entry("patternAddress", value)?;
                    }
                    ElementDefinitionPattern::Age(ref value) => {
                        state.serialize_entry("patternAge", value)?;
                    }
                    ElementDefinitionPattern::Annotation(ref value) => {
                        state.serialize_entry("patternAnnotation", value)?;
                    }
                    ElementDefinitionPattern::Attachment(ref value) => {
                        state.serialize_entry("patternAttachment", value)?;
                    }
                    ElementDefinitionPattern::CodeableConcept(ref value) => {
                        state.serialize_entry("patternCodeableConcept", value)?;
                    }
                    ElementDefinitionPattern::CodeableReference(ref value) => {
                        state.serialize_entry("patternCodeableReference", value)?;
                    }
                    ElementDefinitionPattern::Coding(ref value) => {
                        state.serialize_entry("patternCoding", value)?;
                    }
                    ElementDefinitionPattern::ContactPoint(ref value) => {
                        state.serialize_entry("patternContactPoint", value)?;
                    }
                    ElementDefinitionPattern::Count(ref value) => {
                        state.serialize_entry("patternCount", value)?;
                    }
                    ElementDefinitionPattern::Distance(ref value) => {
                        state.serialize_entry("patternDistance", value)?;
                    }
                    ElementDefinitionPattern::Duration(ref value) => {
                        state.serialize_entry("patternDuration", value)?;
                    }
                    ElementDefinitionPattern::HumanName(ref value) => {
                        state.serialize_entry("patternHumanName", value)?;
                    }
                    ElementDefinitionPattern::Identifier(ref value) => {
                        state.serialize_entry("patternIdentifier", value)?;
                    }
                    ElementDefinitionPattern::Money(ref value) => {
                        state.serialize_entry("patternMoney", value)?;
                    }
                    ElementDefinitionPattern::Period(ref value) => {
                        state.serialize_entry("patternPeriod", value)?;
                    }
                    ElementDefinitionPattern::Quantity(ref value) => {
                        state.serialize_entry("patternQuantity", value)?;
                    }
                    ElementDefinitionPattern::Range(ref value) => {
                        state.serialize_entry("patternRange", value)?;
                    }
                    ElementDefinitionPattern::Ratio(ref value) => {
                        state.serialize_entry("patternRatio", value)?;
                    }
                    ElementDefinitionPattern::RatioRange(ref value) => {
                        state.serialize_entry("patternRatioRange", value)?;
                    }
                    ElementDefinitionPattern::Reference(ref value) => {
                        state.serialize_entry("patternReference", value)?;
                    }
                    ElementDefinitionPattern::SampledData(ref value) => {
                        state.serialize_entry("patternSampledData", value)?;
                    }
                    ElementDefinitionPattern::Signature(ref value) => {
                        state.serialize_entry("patternSignature", value)?;
                    }
                    ElementDefinitionPattern::Timing(ref value) => {
                        state.serialize_entry("patternTiming", value)?;
                    }
                    ElementDefinitionPattern::ContactDetail(ref value) => {
                        state.serialize_entry("patternContactDetail", value)?;
                    }
                    ElementDefinitionPattern::Contributor(ref value) => {
                        state.serialize_entry("patternContributor", value)?;
                    }
                    ElementDefinitionPattern::DataRequirement(ref value) => {
                        state.serialize_entry("patternDataRequirement", value)?;
                    }
                    ElementDefinitionPattern::Expression(ref value) => {
                        state.serialize_entry("patternExpression", value)?;
                    }
                    ElementDefinitionPattern::ParameterDefinition(ref value) => {
                        state.serialize_entry("patternParameterDefinition", value)?;
                    }
                    ElementDefinitionPattern::RelatedArtifact(ref value) => {
                        state.serialize_entry("patternRelatedArtifact", value)?;
                    }
                    ElementDefinitionPattern::TriggerDefinition(ref value) => {
                        state.serialize_entry("patternTriggerDefinition", value)?;
                    }
                    ElementDefinitionPattern::UsageContext(ref value) => {
                        state.serialize_entry("patternUsageContext", value)?;
                    }
                    ElementDefinitionPattern::Dosage(ref value) => {
                        state.serialize_entry("patternDosage", value)?;
                    }
                    ElementDefinitionPattern::Invalid => {
                        return Err(serde::ser::Error::custom("pattern is invalid"))
                    }
                }
            }
            if !self.r#example.is_empty() {
                state.serialize_entry("example", &self.r#example)?;
            }
            if let Some(some) = self.r#min_value.as_ref() {
                match some {
                    ElementDefinitionMinValue::Date(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueDate", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueDate", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueDate", value)?;
                        }
                    }
                    ElementDefinitionMinValue::DateTime(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueDateTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueDateTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueDateTime", value)?;
                        }
                    }
                    ElementDefinitionMinValue::Instant(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueInstant", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueInstant", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueInstant", value)?;
                        }
                    }
                    ElementDefinitionMinValue::Time(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueTime", value)?;
                        }
                    }
                    ElementDefinitionMinValue::Decimal(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = some.parse::<serde_json::Number>().map_err(|_| {
                                    serde::ser::Error::custom("error serializing decimal")
                                })?;
                                state.serialize_entry("minValueDecimal", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueDecimal", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueDecimal", value)?;
                        }
                    }
                    ElementDefinitionMinValue::Integer(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueInteger", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_minValueInteger", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueInteger", value)?;
                        }
                    }
                    ElementDefinitionMinValue::PositiveInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValuePositiveInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_minValuePositiveInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValuePositiveInt", value)?;
                        }
                    }
                    ElementDefinitionMinValue::UnsignedInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("minValueUnsignedInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_minValueUnsignedInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("minValueUnsignedInt", value)?;
                        }
                    }
                    ElementDefinitionMinValue::Quantity(ref value) => {
                        state.serialize_entry("minValueQuantity", value)?;
                    }
                    ElementDefinitionMinValue::Invalid => {
                        return Err(serde::ser::Error::custom("min_value is invalid"))
                    }
                }
            }
            if let Some(some) = self.r#max_value.as_ref() {
                match some {
                    ElementDefinitionMaxValue::Date(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueDate", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueDate", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueDate", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::DateTime(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueDateTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueDateTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueDateTime", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::Instant(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueInstant", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueInstant", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueInstant", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::Time(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueTime", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueTime", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueTime", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::Decimal(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = some.parse::<serde_json::Number>().map_err(|_| {
                                    serde::ser::Error::custom("error serializing decimal")
                                })?;
                                state.serialize_entry("maxValueDecimal", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueDecimal", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueDecimal", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::Integer(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueInteger", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state.serialize_entry("_maxValueInteger", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueInteger", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::PositiveInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValuePositiveInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_maxValuePositiveInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValuePositiveInt", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::UnsignedInt(ref value) => {
                        if _ctx.output_json {
                            if let Some(some) = value.value.as_ref() {
                                let some = Ok(some)?;
                                state.serialize_entry("maxValueUnsignedInt", &some)?;
                            }
                            if value.id.is_some() || !value.extension.is_empty() {
                                let primitive_element =
                                    super::super::serde_helpers::PrimitiveElement {
                                        id: value.id.as_ref(),
                                        extension: &value.extension,
                                    };
                                state
                                    .serialize_entry("_maxValueUnsignedInt", &primitive_element)?;
                            }
                        } else {
                            state.serialize_entry("maxValueUnsignedInt", value)?;
                        }
                    }
                    ElementDefinitionMaxValue::Quantity(ref value) => {
                        state.serialize_entry("maxValueQuantity", value)?;
                    }
                    ElementDefinitionMaxValue::Invalid => {
                        return Err(serde::ser::Error::custom("max_value is invalid"))
                    }
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#max_length.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("maxLength", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_maxLength", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#max_length.as_ref() {
                    state.serialize_entry("maxLength", some)?;
                }
            }
            if _ctx.output_json {
                if !self.r#condition.is_empty() {
                    let values = self
                        .r#condition
                        .iter()
                        .map(|v| &v.value)
                        .map(|v| v.as_ref().map(|some| Ok(some)).transpose())
                        .collect::<Result<Vec<_>, _>>()?;
                    if values.iter().any(|v| v.is_some()) {
                        state.serialize_entry("condition", &values)?;
                    }
                    let requires_elements = self
                        .r#condition
                        .iter()
                        .any(|e| e.id.is_some() || !e.extension.is_empty());
                    if requires_elements {
                        let primitive_elements: Vec<_> = self
                            .r#condition
                            .iter()
                            .map(|e| {
                                if e.id.is_some() || !e.extension.is_empty() {
                                    Some(super::super::serde_helpers::PrimitiveElement {
                                        id: e.id.as_ref(),
                                        extension: &e.extension,
                                    })
                                } else {
                                    None
                                }
                            })
                            .collect();
                        state.serialize_entry("_condition", &primitive_elements)?;
                    }
                }
            } else {
                if !self.r#condition.is_empty() {
                    state.serialize_entry("condition", &self.r#condition)?;
                }
            }
            if !self.r#constraint.is_empty() {
                state.serialize_entry("constraint", &self.r#constraint)?;
            }
            if _ctx.output_json {
                if let Some(some) = self.r#must_support.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("mustSupport", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_mustSupport", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#must_support.as_ref() {
                    state.serialize_entry("mustSupport", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#is_modifier.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("isModifier", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_isModifier", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#is_modifier.as_ref() {
                    state.serialize_entry("isModifier", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#is_modifier_reason.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("isModifierReason", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_isModifierReason", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#is_modifier_reason.as_ref() {
                    state.serialize_entry("isModifierReason", some)?;
                }
            }
            if _ctx.output_json {
                if let Some(some) = self.r#is_summary.as_ref() {
                    if let Some(some) = some.value.as_ref() {
                        let some = Ok(some)?;
                        state.serialize_entry("isSummary", &some)?;
                    }
                    if some.id.is_some() || !some.extension.is_empty() {
                        let primitive_element = super::super::serde_helpers::PrimitiveElement {
                            id: some.id.as_ref(),
                            extension: &some.extension,
                        };
                        state.serialize_entry("_isSummary", &primitive_element)?;
                    }
                }
            } else {
                if let Some(some) = self.r#is_summary.as_ref() {
                    state.serialize_entry("isSummary", some)?;
                }
            }
            if let Some(some) = self.r#binding.as_ref() {
                state.serialize_entry("binding", some)?;
            }
            if !self.r#mapping.is_empty() {
                state.serialize_entry("mapping", &self.r#mapping)?;
            }
            state.end()
        })
    }
}
impl<'de> serde::de::Deserialize<'de> for ElementDefinition {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        #[derive(serde :: Deserialize)]
        #[serde(field_identifier)]
        enum Field {
            #[serde(rename = "id")]
            Id,
            #[serde(rename = "extension")]
            Extension,
            #[serde(rename = "modifierExtension")]
            ModifierExtension,
            #[serde(rename = "path")]
            Path,
            #[serde(rename = "_path")]
            PathPrimitiveElement,
            #[serde(rename = "representation")]
            Representation,
            #[serde(rename = "_representation")]
            RepresentationPrimitiveElement,
            #[serde(rename = "sliceName")]
            SliceName,
            #[serde(rename = "_sliceName")]
            SliceNamePrimitiveElement,
            #[serde(rename = "sliceIsConstraining")]
            SliceIsConstraining,
            #[serde(rename = "_sliceIsConstraining")]
            SliceIsConstrainingPrimitiveElement,
            #[serde(rename = "label")]
            Label,
            #[serde(rename = "_label")]
            LabelPrimitiveElement,
            #[serde(rename = "code")]
            Code,
            #[serde(rename = "slicing")]
            Slicing,
            #[serde(rename = "short")]
            Short,
            #[serde(rename = "_short")]
            ShortPrimitiveElement,
            #[serde(rename = "definition")]
            Definition,
            #[serde(rename = "_definition")]
            DefinitionPrimitiveElement,
            #[serde(rename = "comment")]
            Comment,
            #[serde(rename = "_comment")]
            CommentPrimitiveElement,
            #[serde(rename = "requirements")]
            Requirements,
            #[serde(rename = "_requirements")]
            RequirementsPrimitiveElement,
            #[serde(rename = "alias")]
            Alias,
            #[serde(rename = "_alias")]
            AliasPrimitiveElement,
            #[serde(rename = "min")]
            Min,
            #[serde(rename = "_min")]
            MinPrimitiveElement,
            #[serde(rename = "max")]
            Max,
            #[serde(rename = "_max")]
            MaxPrimitiveElement,
            #[serde(rename = "base")]
            Base,
            #[serde(rename = "contentReference")]
            ContentReference,
            #[serde(rename = "_contentReference")]
            ContentReferencePrimitiveElement,
            #[serde(rename = "type")]
            Type,
            #[serde(rename = "defaultValueBase64Binary")]
            DefaultValueBase64Binary,
            #[serde(rename = "_defaultValueBase64Binary")]
            DefaultValueBase64BinaryPrimitiveElement,
            #[serde(rename = "defaultValueBoolean")]
            DefaultValueBoolean,
            #[serde(rename = "_defaultValueBoolean")]
            DefaultValueBooleanPrimitiveElement,
            #[serde(rename = "defaultValueCanonical")]
            DefaultValueCanonical,
            #[serde(rename = "_defaultValueCanonical")]
            DefaultValueCanonicalPrimitiveElement,
            #[serde(rename = "defaultValueCode")]
            DefaultValueCode,
            #[serde(rename = "_defaultValueCode")]
            DefaultValueCodePrimitiveElement,
            #[serde(rename = "defaultValueDate")]
            DefaultValueDate,
            #[serde(rename = "_defaultValueDate")]
            DefaultValueDatePrimitiveElement,
            #[serde(rename = "defaultValueDateTime")]
            DefaultValueDateTime,
            #[serde(rename = "_defaultValueDateTime")]
            DefaultValueDateTimePrimitiveElement,
            #[serde(rename = "defaultValueDecimal")]
            DefaultValueDecimal,
            #[serde(rename = "_defaultValueDecimal")]
            DefaultValueDecimalPrimitiveElement,
            #[serde(rename = "defaultValueId")]
            DefaultValueId,
            #[serde(rename = "_defaultValueId")]
            DefaultValueIdPrimitiveElement,
            #[serde(rename = "defaultValueInstant")]
            DefaultValueInstant,
            #[serde(rename = "_defaultValueInstant")]
            DefaultValueInstantPrimitiveElement,
            #[serde(rename = "defaultValueInteger")]
            DefaultValueInteger,
            #[serde(rename = "_defaultValueInteger")]
            DefaultValueIntegerPrimitiveElement,
            #[serde(rename = "defaultValueMarkdown")]
            DefaultValueMarkdown,
            #[serde(rename = "_defaultValueMarkdown")]
            DefaultValueMarkdownPrimitiveElement,
            #[serde(rename = "defaultValueOid")]
            DefaultValueOid,
            #[serde(rename = "_defaultValueOid")]
            DefaultValueOidPrimitiveElement,
            #[serde(rename = "defaultValuePositiveInt")]
            DefaultValuePositiveInt,
            #[serde(rename = "_defaultValuePositiveInt")]
            DefaultValuePositiveIntPrimitiveElement,
            #[serde(rename = "defaultValueString")]
            DefaultValueString,
            #[serde(rename = "_defaultValueString")]
            DefaultValueStringPrimitiveElement,
            #[serde(rename = "defaultValueTime")]
            DefaultValueTime,
            #[serde(rename = "_defaultValueTime")]
            DefaultValueTimePrimitiveElement,
            #[serde(rename = "defaultValueUnsignedInt")]
            DefaultValueUnsignedInt,
            #[serde(rename = "_defaultValueUnsignedInt")]
            DefaultValueUnsignedIntPrimitiveElement,
            #[serde(rename = "defaultValueUri")]
            DefaultValueUri,
            #[serde(rename = "_defaultValueUri")]
            DefaultValueUriPrimitiveElement,
            #[serde(rename = "defaultValueUrl")]
            DefaultValueUrl,
            #[serde(rename = "_defaultValueUrl")]
            DefaultValueUrlPrimitiveElement,
            #[serde(rename = "defaultValueUuid")]
            DefaultValueUuid,
            #[serde(rename = "_defaultValueUuid")]
            DefaultValueUuidPrimitiveElement,
            #[serde(rename = "defaultValueAddress")]
            DefaultValueAddress,
            #[serde(rename = "defaultValueAge")]
            DefaultValueAge,
            #[serde(rename = "defaultValueAnnotation")]
            DefaultValueAnnotation,
            #[serde(rename = "defaultValueAttachment")]
            DefaultValueAttachment,
            #[serde(rename = "defaultValueCodeableConcept")]
            DefaultValueCodeableConcept,
            #[serde(rename = "defaultValueCodeableReference")]
            DefaultValueCodeableReference,
            #[serde(rename = "defaultValueCoding")]
            DefaultValueCoding,
            #[serde(rename = "defaultValueContactPoint")]
            DefaultValueContactPoint,
            #[serde(rename = "defaultValueCount")]
            DefaultValueCount,
            #[serde(rename = "defaultValueDistance")]
            DefaultValueDistance,
            #[serde(rename = "defaultValueDuration")]
            DefaultValueDuration,
            #[serde(rename = "defaultValueHumanName")]
            DefaultValueHumanName,
            #[serde(rename = "defaultValueIdentifier")]
            DefaultValueIdentifier,
            #[serde(rename = "defaultValueMoney")]
            DefaultValueMoney,
            #[serde(rename = "defaultValuePeriod")]
            DefaultValuePeriod,
            #[serde(rename = "defaultValueQuantity")]
            DefaultValueQuantity,
            #[serde(rename = "defaultValueRange")]
            DefaultValueRange,
            #[serde(rename = "defaultValueRatio")]
            DefaultValueRatio,
            #[serde(rename = "defaultValueRatioRange")]
            DefaultValueRatioRange,
            #[serde(rename = "defaultValueReference")]
            DefaultValueReference,
            #[serde(rename = "defaultValueSampledData")]
            DefaultValueSampledData,
            #[serde(rename = "defaultValueSignature")]
            DefaultValueSignature,
            #[serde(rename = "defaultValueTiming")]
            DefaultValueTiming,
            #[serde(rename = "defaultValueContactDetail")]
            DefaultValueContactDetail,
            #[serde(rename = "defaultValueContributor")]
            DefaultValueContributor,
            #[serde(rename = "defaultValueDataRequirement")]
            DefaultValueDataRequirement,
            #[serde(rename = "defaultValueExpression")]
            DefaultValueExpression,
            #[serde(rename = "defaultValueParameterDefinition")]
            DefaultValueParameterDefinition,
            #[serde(rename = "defaultValueRelatedArtifact")]
            DefaultValueRelatedArtifact,
            #[serde(rename = "defaultValueTriggerDefinition")]
            DefaultValueTriggerDefinition,
            #[serde(rename = "defaultValueUsageContext")]
            DefaultValueUsageContext,
            #[serde(rename = "defaultValueDosage")]
            DefaultValueDosage,
            #[serde(rename = "meaningWhenMissing")]
            MeaningWhenMissing,
            #[serde(rename = "_meaningWhenMissing")]
            MeaningWhenMissingPrimitiveElement,
            #[serde(rename = "orderMeaning")]
            OrderMeaning,
            #[serde(rename = "_orderMeaning")]
            OrderMeaningPrimitiveElement,
            #[serde(rename = "fixedBase64Binary")]
            FixedBase64Binary,
            #[serde(rename = "_fixedBase64Binary")]
            FixedBase64BinaryPrimitiveElement,
            #[serde(rename = "fixedBoolean")]
            FixedBoolean,
            #[serde(rename = "_fixedBoolean")]
            FixedBooleanPrimitiveElement,
            #[serde(rename = "fixedCanonical")]
            FixedCanonical,
            #[serde(rename = "_fixedCanonical")]
            FixedCanonicalPrimitiveElement,
            #[serde(rename = "fixedCode")]
            FixedCode,
            #[serde(rename = "_fixedCode")]
            FixedCodePrimitiveElement,
            #[serde(rename = "fixedDate")]
            FixedDate,
            #[serde(rename = "_fixedDate")]
            FixedDatePrimitiveElement,
            #[serde(rename = "fixedDateTime")]
            FixedDateTime,
            #[serde(rename = "_fixedDateTime")]
            FixedDateTimePrimitiveElement,
            #[serde(rename = "fixedDecimal")]
            FixedDecimal,
            #[serde(rename = "_fixedDecimal")]
            FixedDecimalPrimitiveElement,
            #[serde(rename = "fixedId")]
            FixedId,
            #[serde(rename = "_fixedId")]
            FixedIdPrimitiveElement,
            #[serde(rename = "fixedInstant")]
            FixedInstant,
            #[serde(rename = "_fixedInstant")]
            FixedInstantPrimitiveElement,
            #[serde(rename = "fixedInteger")]
            FixedInteger,
            #[serde(rename = "_fixedInteger")]
            FixedIntegerPrimitiveElement,
            #[serde(rename = "fixedMarkdown")]
            FixedMarkdown,
            #[serde(rename = "_fixedMarkdown")]
            FixedMarkdownPrimitiveElement,
            #[serde(rename = "fixedOid")]
            FixedOid,
            #[serde(rename = "_fixedOid")]
            FixedOidPrimitiveElement,
            #[serde(rename = "fixedPositiveInt")]
            FixedPositiveInt,
            #[serde(rename = "_fixedPositiveInt")]
            FixedPositiveIntPrimitiveElement,
            #[serde(rename = "fixedString")]
            FixedString,
            #[serde(rename = "_fixedString")]
            FixedStringPrimitiveElement,
            #[serde(rename = "fixedTime")]
            FixedTime,
            #[serde(rename = "_fixedTime")]
            FixedTimePrimitiveElement,
            #[serde(rename = "fixedUnsignedInt")]
            FixedUnsignedInt,
            #[serde(rename = "_fixedUnsignedInt")]
            FixedUnsignedIntPrimitiveElement,
            #[serde(rename = "fixedUri")]
            FixedUri,
            #[serde(rename = "_fixedUri")]
            FixedUriPrimitiveElement,
            #[serde(rename = "fixedUrl")]
            FixedUrl,
            #[serde(rename = "_fixedUrl")]
            FixedUrlPrimitiveElement,
            #[serde(rename = "fixedUuid")]
            FixedUuid,
            #[serde(rename = "_fixedUuid")]
            FixedUuidPrimitiveElement,
            #[serde(rename = "fixedAddress")]
            FixedAddress,
            #[serde(rename = "fixedAge")]
            FixedAge,
            #[serde(rename = "fixedAnnotation")]
            FixedAnnotation,
            #[serde(rename = "fixedAttachment")]
            FixedAttachment,
            #[serde(rename = "fixedCodeableConcept")]
            FixedCodeableConcept,
            #[serde(rename = "fixedCodeableReference")]
            FixedCodeableReference,
            #[serde(rename = "fixedCoding")]
            FixedCoding,
            #[serde(rename = "fixedContactPoint")]
            FixedContactPoint,
            #[serde(rename = "fixedCount")]
            FixedCount,
            #[serde(rename = "fixedDistance")]
            FixedDistance,
            #[serde(rename = "fixedDuration")]
            FixedDuration,
            #[serde(rename = "fixedHumanName")]
            FixedHumanName,
            #[serde(rename = "fixedIdentifier")]
            FixedIdentifier,
            #[serde(rename = "fixedMoney")]
            FixedMoney,
            #[serde(rename = "fixedPeriod")]
            FixedPeriod,
            #[serde(rename = "fixedQuantity")]
            FixedQuantity,
            #[serde(rename = "fixedRange")]
            FixedRange,
            #[serde(rename = "fixedRatio")]
            FixedRatio,
            #[serde(rename = "fixedRatioRange")]
            FixedRatioRange,
            #[serde(rename = "fixedReference")]
            FixedReference,
            #[serde(rename = "fixedSampledData")]
            FixedSampledData,
            #[serde(rename = "fixedSignature")]
            FixedSignature,
            #[serde(rename = "fixedTiming")]
            FixedTiming,
            #[serde(rename = "fixedContactDetail")]
            FixedContactDetail,
            #[serde(rename = "fixedContributor")]
            FixedContributor,
            #[serde(rename = "fixedDataRequirement")]
            FixedDataRequirement,
            #[serde(rename = "fixedExpression")]
            FixedExpression,
            #[serde(rename = "fixedParameterDefinition")]
            FixedParameterDefinition,
            #[serde(rename = "fixedRelatedArtifact")]
            FixedRelatedArtifact,
            #[serde(rename = "fixedTriggerDefinition")]
            FixedTriggerDefinition,
            #[serde(rename = "fixedUsageContext")]
            FixedUsageContext,
            #[serde(rename = "fixedDosage")]
            FixedDosage,
            #[serde(rename = "patternBase64Binary")]
            PatternBase64Binary,
            #[serde(rename = "_patternBase64Binary")]
            PatternBase64BinaryPrimitiveElement,
            #[serde(rename = "patternBoolean")]
            PatternBoolean,
            #[serde(rename = "_patternBoolean")]
            PatternBooleanPrimitiveElement,
            #[serde(rename = "patternCanonical")]
            PatternCanonical,
            #[serde(rename = "_patternCanonical")]
            PatternCanonicalPrimitiveElement,
            #[serde(rename = "patternCode")]
            PatternCode,
            #[serde(rename = "_patternCode")]
            PatternCodePrimitiveElement,
            #[serde(rename = "patternDate")]
            PatternDate,
            #[serde(rename = "_patternDate")]
            PatternDatePrimitiveElement,
            #[serde(rename = "patternDateTime")]
            PatternDateTime,
            #[serde(rename = "_patternDateTime")]
            PatternDateTimePrimitiveElement,
            #[serde(rename = "patternDecimal")]
            PatternDecimal,
            #[serde(rename = "_patternDecimal")]
            PatternDecimalPrimitiveElement,
            #[serde(rename = "patternId")]
            PatternId,
            #[serde(rename = "_patternId")]
            PatternIdPrimitiveElement,
            #[serde(rename = "patternInstant")]
            PatternInstant,
            #[serde(rename = "_patternInstant")]
            PatternInstantPrimitiveElement,
            #[serde(rename = "patternInteger")]
            PatternInteger,
            #[serde(rename = "_patternInteger")]
            PatternIntegerPrimitiveElement,
            #[serde(rename = "patternMarkdown")]
            PatternMarkdown,
            #[serde(rename = "_patternMarkdown")]
            PatternMarkdownPrimitiveElement,
            #[serde(rename = "patternOid")]
            PatternOid,
            #[serde(rename = "_patternOid")]
            PatternOidPrimitiveElement,
            #[serde(rename = "patternPositiveInt")]
            PatternPositiveInt,
            #[serde(rename = "_patternPositiveInt")]
            PatternPositiveIntPrimitiveElement,
            #[serde(rename = "patternString")]
            PatternString,
            #[serde(rename = "_patternString")]
            PatternStringPrimitiveElement,
            #[serde(rename = "patternTime")]
            PatternTime,
            #[serde(rename = "_patternTime")]
            PatternTimePrimitiveElement,
            #[serde(rename = "patternUnsignedInt")]
            PatternUnsignedInt,
            #[serde(rename = "_patternUnsignedInt")]
            PatternUnsignedIntPrimitiveElement,
            #[serde(rename = "patternUri")]
            PatternUri,
            #[serde(rename = "_patternUri")]
            PatternUriPrimitiveElement,
            #[serde(rename = "patternUrl")]
            PatternUrl,
            #[serde(rename = "_patternUrl")]
            PatternUrlPrimitiveElement,
            #[serde(rename = "patternUuid")]
            PatternUuid,
            #[serde(rename = "_patternUuid")]
            PatternUuidPrimitiveElement,
            #[serde(rename = "patternAddress")]
            PatternAddress,
            #[serde(rename = "patternAge")]
            PatternAge,
            #[serde(rename = "patternAnnotation")]
            PatternAnnotation,
            #[serde(rename = "patternAttachment")]
            PatternAttachment,
            #[serde(rename = "patternCodeableConcept")]
            PatternCodeableConcept,
            #[serde(rename = "patternCodeableReference")]
            PatternCodeableReference,
            #[serde(rename = "patternCoding")]
            PatternCoding,
            #[serde(rename = "patternContactPoint")]
            PatternContactPoint,
            #[serde(rename = "patternCount")]
            PatternCount,
            #[serde(rename = "patternDistance")]
            PatternDistance,
            #[serde(rename = "patternDuration")]
            PatternDuration,
            #[serde(rename = "patternHumanName")]
            PatternHumanName,
            #[serde(rename = "patternIdentifier")]
            PatternIdentifier,
            #[serde(rename = "patternMoney")]
            PatternMoney,
            #[serde(rename = "patternPeriod")]
            PatternPeriod,
            #[serde(rename = "patternQuantity")]
            PatternQuantity,
            #[serde(rename = "patternRange")]
            PatternRange,
            #[serde(rename = "patternRatio")]
            PatternRatio,
            #[serde(rename = "patternRatioRange")]
            PatternRatioRange,
            #[serde(rename = "patternReference")]
            PatternReference,
            #[serde(rename = "patternSampledData")]
            PatternSampledData,
            #[serde(rename = "patternSignature")]
            PatternSignature,
            #[serde(rename = "patternTiming")]
            PatternTiming,
            #[serde(rename = "patternContactDetail")]
            PatternContactDetail,
            #[serde(rename = "patternContributor")]
            PatternContributor,
            #[serde(rename = "patternDataRequirement")]
            PatternDataRequirement,
            #[serde(rename = "patternExpression")]
            PatternExpression,
            #[serde(rename = "patternParameterDefinition")]
            PatternParameterDefinition,
            #[serde(rename = "patternRelatedArtifact")]
            PatternRelatedArtifact,
            #[serde(rename = "patternTriggerDefinition")]
            PatternTriggerDefinition,
            #[serde(rename = "patternUsageContext")]
            PatternUsageContext,
            #[serde(rename = "patternDosage")]
            PatternDosage,
            #[serde(rename = "example")]
            Example,
            #[serde(rename = "minValueDate")]
            MinValueDate,
            #[serde(rename = "_minValueDate")]
            MinValueDatePrimitiveElement,
            #[serde(rename = "minValueDateTime")]
            MinValueDateTime,
            #[serde(rename = "_minValueDateTime")]
            MinValueDateTimePrimitiveElement,
            #[serde(rename = "minValueInstant")]
            MinValueInstant,
            #[serde(rename = "_minValueInstant")]
            MinValueInstantPrimitiveElement,
            #[serde(rename = "minValueTime")]
            MinValueTime,
            #[serde(rename = "_minValueTime")]
            MinValueTimePrimitiveElement,
            #[serde(rename = "minValueDecimal")]
            MinValueDecimal,
            #[serde(rename = "_minValueDecimal")]
            MinValueDecimalPrimitiveElement,
            #[serde(rename = "minValueInteger")]
            MinValueInteger,
            #[serde(rename = "_minValueInteger")]
            MinValueIntegerPrimitiveElement,
            #[serde(rename = "minValuePositiveInt")]
            MinValuePositiveInt,
            #[serde(rename = "_minValuePositiveInt")]
            MinValuePositiveIntPrimitiveElement,
            #[serde(rename = "minValueUnsignedInt")]
            MinValueUnsignedInt,
            #[serde(rename = "_minValueUnsignedInt")]
            MinValueUnsignedIntPrimitiveElement,
            #[serde(rename = "minValueQuantity")]
            MinValueQuantity,
            #[serde(rename = "maxValueDate")]
            MaxValueDate,
            #[serde(rename = "_maxValueDate")]
            MaxValueDatePrimitiveElement,
            #[serde(rename = "maxValueDateTime")]
            MaxValueDateTime,
            #[serde(rename = "_maxValueDateTime")]
            MaxValueDateTimePrimitiveElement,
            #[serde(rename = "maxValueInstant")]
            MaxValueInstant,
            #[serde(rename = "_maxValueInstant")]
            MaxValueInstantPrimitiveElement,
            #[serde(rename = "maxValueTime")]
            MaxValueTime,
            #[serde(rename = "_maxValueTime")]
            MaxValueTimePrimitiveElement,
            #[serde(rename = "maxValueDecimal")]
            MaxValueDecimal,
            #[serde(rename = "_maxValueDecimal")]
            MaxValueDecimalPrimitiveElement,
            #[serde(rename = "maxValueInteger")]
            MaxValueInteger,
            #[serde(rename = "_maxValueInteger")]
            MaxValueIntegerPrimitiveElement,
            #[serde(rename = "maxValuePositiveInt")]
            MaxValuePositiveInt,
            #[serde(rename = "_maxValuePositiveInt")]
            MaxValuePositiveIntPrimitiveElement,
            #[serde(rename = "maxValueUnsignedInt")]
            MaxValueUnsignedInt,
            #[serde(rename = "_maxValueUnsignedInt")]
            MaxValueUnsignedIntPrimitiveElement,
            #[serde(rename = "maxValueQuantity")]
            MaxValueQuantity,
            #[serde(rename = "maxLength")]
            MaxLength,
            #[serde(rename = "_maxLength")]
            MaxLengthPrimitiveElement,
            #[serde(rename = "condition")]
            Condition,
            #[serde(rename = "_condition")]
            ConditionPrimitiveElement,
            #[serde(rename = "constraint")]
            Constraint,
            #[serde(rename = "mustSupport")]
            MustSupport,
            #[serde(rename = "_mustSupport")]
            MustSupportPrimitiveElement,
            #[serde(rename = "isModifier")]
            IsModifier,
            #[serde(rename = "_isModifier")]
            IsModifierPrimitiveElement,
            #[serde(rename = "isModifierReason")]
            IsModifierReason,
            #[serde(rename = "_isModifierReason")]
            IsModifierReasonPrimitiveElement,
            #[serde(rename = "isSummary")]
            IsSummary,
            #[serde(rename = "_isSummary")]
            IsSummaryPrimitiveElement,
            #[serde(rename = "binding")]
            Binding,
            #[serde(rename = "mapping")]
            Mapping,
            Unknown(std::string::String),
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ElementDefinition;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("ElementDefinition")
            }
            fn visit_map<V>(self, mut map_access: V) -> Result<ElementDefinition, V::Error>
            where
                V: serde::de::MapAccess<'de>,
            {
                let mut r#id: Option<std::string::String> = None;
                let mut r#extension: Option<Vec<Box<super::super::types::Extension>>> = None;
                let mut r#modifier_extension: Option<Vec<Box<super::super::types::Extension>>> =
                    None;
                let mut r#path: Option<super::super::types::String> = None;
                let mut r#representation: Option<Vec<super::super::types::Code>> = None;
                let mut r#slice_name: Option<super::super::types::String> = None;
                let mut r#slice_is_constraining: Option<super::super::types::Boolean> = None;
                let mut r#label: Option<super::super::types::String> = None;
                let mut r#code: Option<Vec<Box<super::super::types::Coding>>> = None;
                let mut r#slicing: Option<ElementDefinitionSlicing> = None;
                let mut r#short: Option<super::super::types::String> = None;
                let mut r#definition: Option<super::super::types::Markdown> = None;
                let mut r#comment: Option<super::super::types::Markdown> = None;
                let mut r#requirements: Option<super::super::types::Markdown> = None;
                let mut r#alias: Option<Vec<super::super::types::String>> = None;
                let mut r#min: Option<super::super::types::UnsignedInt> = None;
                let mut r#max: Option<super::super::types::String> = None;
                let mut r#base: Option<ElementDefinitionBase> = None;
                let mut r#content_reference: Option<super::super::types::Uri> = None;
                let mut r#type: Option<Vec<ElementDefinitionType>> = None;
                let mut r#default_value: Option<ElementDefinitionDefaultValue> = None;
                let mut r#meaning_when_missing: Option<super::super::types::Markdown> = None;
                let mut r#order_meaning: Option<super::super::types::String> = None;
                let mut r#fixed: Option<ElementDefinitionFixed> = None;
                let mut r#pattern: Option<ElementDefinitionPattern> = None;
                let mut r#example: Option<Vec<ElementDefinitionExample>> = None;
                let mut r#min_value: Option<ElementDefinitionMinValue> = None;
                let mut r#max_value: Option<ElementDefinitionMaxValue> = None;
                let mut r#max_length: Option<super::super::types::Integer> = None;
                let mut r#condition: Option<Vec<super::super::types::Id>> = None;
                let mut r#constraint: Option<Vec<ElementDefinitionConstraint>> = None;
                let mut r#must_support: Option<super::super::types::Boolean> = None;
                let mut r#is_modifier: Option<super::super::types::Boolean> = None;
                let mut r#is_modifier_reason: Option<super::super::types::String> = None;
                let mut r#is_summary: Option<super::super::types::Boolean> = None;
                let mut r#binding: Option<ElementDefinitionBinding> = None;
                let mut r#mapping: Option<Vec<ElementDefinitionMapping>> = None;
                fhirbolt_shared::serde_context::de::DESERIALIZATION_CONTEXT.with(|_ctx| {
                    let _ctx = _ctx.borrow();
                    while let Some(map_access_key) = map_access.next_key()? {
                        match map_access_key {
                            Field::Id => {
                                if r#id.is_some() {
                                    return Err(serde::de::Error::duplicate_field("id"));
                                }
                                r#id = Some(map_access.next_value()?);
                            }
                            Field::Extension => {
                                if r#extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field("extension"));
                                }
                                r#extension = Some(map_access.next_value()?);
                            }
                            Field::ModifierExtension => {
                                if r#modifier_extension.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "modifierExtension",
                                    ));
                                }
                                r#modifier_extension = Some(map_access.next_value()?);
                            }
                            Field::Path => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#path.is_some() {
                                        return Err(serde::de::Error::duplicate_field("path"));
                                    }
                                    r#path = Some(map_access.next_value()?);
                                }
                            }
                            Field::PathPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#path.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_path"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "path",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Representation => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#representation.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field(
                                            "representation",
                                        ));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#representation.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "representation",
                                        ));
                                    }
                                    r#representation = Some(map_access.next_value()?);
                                }
                            }
                            Field::RepresentationPrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#representation.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_representation",
                                        ));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "representation",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::SliceName => {
                                if _ctx.from_json {
                                    let some = r#slice_name.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("sliceName"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#slice_name.is_some() {
                                        return Err(serde::de::Error::duplicate_field("sliceName"));
                                    }
                                    r#slice_name = Some(map_access.next_value()?);
                                }
                            }
                            Field::SliceNamePrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#slice_name.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_sliceName",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "sliceName",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::SliceIsConstraining => {
                                if _ctx.from_json {
                                    let some =
                                        r#slice_is_constraining.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "sliceIsConstraining",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#slice_is_constraining.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "sliceIsConstraining",
                                        ));
                                    }
                                    r#slice_is_constraining = Some(map_access.next_value()?);
                                }
                            }
                            Field::SliceIsConstrainingPrimitiveElement => {
                                if _ctx.from_json {
                                    let some =
                                        r#slice_is_constraining.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_sliceIsConstraining",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "sliceIsConstraining",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Label => {
                                if _ctx.from_json {
                                    let some = r#label.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("label"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#label.is_some() {
                                        return Err(serde::de::Error::duplicate_field("label"));
                                    }
                                    r#label = Some(map_access.next_value()?);
                                }
                            }
                            Field::LabelPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#label.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_label"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "label",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Code => {
                                if r#code.is_some() {
                                    return Err(serde::de::Error::duplicate_field("code"));
                                }
                                r#code = Some(map_access.next_value()?);
                            }
                            Field::Slicing => {
                                if r#slicing.is_some() {
                                    return Err(serde::de::Error::duplicate_field("slicing"));
                                }
                                r#slicing = Some(map_access.next_value()?);
                            }
                            Field::Short => {
                                if _ctx.from_json {
                                    let some = r#short.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("short"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#short.is_some() {
                                        return Err(serde::de::Error::duplicate_field("short"));
                                    }
                                    r#short = Some(map_access.next_value()?);
                                }
                            }
                            Field::ShortPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#short.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_short"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "short",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Definition => {
                                if _ctx.from_json {
                                    let some = r#definition.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "definition",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#definition.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "definition",
                                        ));
                                    }
                                    r#definition = Some(map_access.next_value()?);
                                }
                            }
                            Field::DefinitionPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#definition.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_definition",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "definition",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Comment => {
                                if _ctx.from_json {
                                    let some = r#comment.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("comment"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#comment.is_some() {
                                        return Err(serde::de::Error::duplicate_field("comment"));
                                    }
                                    r#comment = Some(map_access.next_value()?);
                                }
                            }
                            Field::CommentPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#comment.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_comment"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "comment",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Requirements => {
                                if _ctx.from_json {
                                    let some = r#requirements.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "requirements",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#requirements.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "requirements",
                                        ));
                                    }
                                    r#requirements = Some(map_access.next_value()?);
                                }
                            }
                            Field::RequirementsPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#requirements.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_requirements",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "requirements",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Alias => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#alias.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field("alias"));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#alias.is_some() {
                                        return Err(serde::de::Error::duplicate_field("alias"));
                                    }
                                    r#alias = Some(map_access.next_value()?);
                                }
                            }
                            Field::AliasPrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#alias.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field("_alias"));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "alias",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Min => {
                                if _ctx.from_json {
                                    let some = r#min.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("min"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#min.is_some() {
                                        return Err(serde::de::Error::duplicate_field("min"));
                                    }
                                    r#min = Some(map_access.next_value()?);
                                }
                            }
                            Field::MinPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#min.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_min"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "min",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Max => {
                                if _ctx.from_json {
                                    let some = r#max.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("max"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#max.is_some() {
                                        return Err(serde::de::Error::duplicate_field("max"));
                                    }
                                    r#max = Some(map_access.next_value()?);
                                }
                            }
                            Field::MaxPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#max.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field("_max"));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "max",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Base => {
                                if r#base.is_some() {
                                    return Err(serde::de::Error::duplicate_field("base"));
                                }
                                r#base = Some(map_access.next_value()?);
                            }
                            Field::ContentReference => {
                                if _ctx.from_json {
                                    let some =
                                        r#content_reference.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "contentReference",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#content_reference.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "contentReference",
                                        ));
                                    }
                                    r#content_reference = Some(map_access.next_value()?);
                                }
                            }
                            Field::ContentReferencePrimitiveElement => {
                                if _ctx.from_json {
                                    let some =
                                        r#content_reference.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_contentReference",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "contentReference",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Type => {
                                if r#type.is_some() {
                                    return Err(serde::de::Error::duplicate_field("type"));
                                }
                                r#type = Some(map_access.next_value()?);
                            }
                            Field::DefaultValueBase64Binary => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Base64Binary(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::Base64Binary(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueBase64Binary",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueBase64Binary",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::Base64Binary(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValueBase64BinaryPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Base64Binary(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::Base64Binary(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueBase64Binary",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueBase64Binary",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueBoolean => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Boolean(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueBoolean",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueBoolean",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Boolean(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueBooleanPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Boolean(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueBoolean",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueBoolean",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueCanonical => {
                                if _ctx.from_json {
                                    let r#enum =
                                        r#default_value.get_or_insert(
                                            ElementDefinitionDefaultValue::Canonical(
                                                Default::default(),
                                            ),
                                        );
                                    if let ElementDefinitionDefaultValue::Canonical(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueCanonical",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueCanonical",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::Canonical(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValueCanonicalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum =
                                        r#default_value.get_or_insert(
                                            ElementDefinitionDefaultValue::Canonical(
                                                Default::default(),
                                            ),
                                        );
                                    if let ElementDefinitionDefaultValue::Canonical(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueCanonical",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueCanonical",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueCode => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Code(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Code(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueCode",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueCode",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Code(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueCodePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Code(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Code(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueCode",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueCode",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueDate => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueDate",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueDate",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::DateTime(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueDateTime",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::DateTime(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValueDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::DateTime(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Decimal(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueDecimal",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Decimal(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueId => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Id(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Id(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueId",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueId",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Id(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueIdPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Id(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Id(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueId",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueId",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Instant(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueInstant",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Instant(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Integer(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueInteger",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Integer(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueMarkdown => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Markdown(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueMarkdown",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueMarkdown",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::Markdown(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValueMarkdownPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Markdown(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueMarkdown",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueMarkdown",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueOid => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Oid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueOid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueOid",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Oid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueOidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Oid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueOid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueOid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValuePositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::PositiveInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::PositiveInt(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValuePositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValuePositiveInt",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::PositiveInt(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValuePositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::PositiveInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::PositiveInt(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValuePositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValuePositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueString => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::String(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::String(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueString",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueString",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::String(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueStringPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::String(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::String(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueString",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueString",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueTime => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueTime",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::UnsignedInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::UnsignedInt(variant) =
                                        r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueUnsignedInt",
                                        ));
                                    }
                                    r#default_value =
                                        Some(ElementDefinitionDefaultValue::UnsignedInt(
                                            map_access.next_value()?,
                                        ));
                                }
                            }
                            Field::DefaultValueUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::UnsignedInt(
                                            Default::default(),
                                        ),
                                    );
                                    if let ElementDefinitionDefaultValue::UnsignedInt(variant) =
                                        r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueUri => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Uri(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueUri",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueUri",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Uri(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueUriPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Uri(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueUri",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueUri",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueUrl => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Url(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Url(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueUrl",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueUrl",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Url(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueUrlPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Url(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Url(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueUrl",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueUrl",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueUuid => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Uuid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "defaultValueUuid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#default_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "defaultValueUuid",
                                        ));
                                    }
                                    r#default_value = Some(ElementDefinitionDefaultValue::Uuid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::DefaultValueUuidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#default_value.get_or_insert(
                                        ElementDefinitionDefaultValue::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionDefaultValue::Uuid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_defaultValueUuid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_defaultValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "defaultValueUuid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::DefaultValueAddress => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueAddress",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Address(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueAge => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueAge",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Age(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueAnnotation => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueAnnotation",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Annotation(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueAttachment => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueAttachment",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Attachment(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueCodeableConcept => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueCodeableConcept",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::CodeableConcept(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueCodeableReference => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueCodeableReference",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::CodeableReference(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueCoding => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueCoding",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Coding(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueContactPoint => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueContactPoint",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::ContactPoint(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueCount => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueCount",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Count(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueDistance => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueDistance",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Distance(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueDuration => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueDuration",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Duration(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueHumanName => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueHumanName",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::HumanName(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueIdentifier => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueIdentifier",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Identifier(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueMoney => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueMoney",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Money(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValuePeriod => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValuePeriod",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Period(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueQuantity => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueQuantity",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueRange => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueRange",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Range(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueRatio => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueRatio",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Ratio(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueRatioRange => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueRatioRange",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::RatioRange(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueReference => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueReference",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Reference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueSampledData => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueSampledData",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::SampledData(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueSignature => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueSignature",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Signature(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueTiming => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueTiming",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Timing(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueContactDetail => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueContactDetail",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::ContactDetail(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueContributor => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueContributor",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Contributor(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueDataRequirement => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueDataRequirement",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::DataRequirement(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueExpression => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueExpression",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Expression(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::DefaultValueParameterDefinition => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueParameterDefinition",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::ParameterDefinition(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueRelatedArtifact => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueRelatedArtifact",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::RelatedArtifact(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueTriggerDefinition => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueTriggerDefinition",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::TriggerDefinition(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueUsageContext => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueUsageContext",
                                    ));
                                }
                                r#default_value =
                                    Some(ElementDefinitionDefaultValue::UsageContext(
                                        map_access.next_value()?,
                                    ));
                            }
                            Field::DefaultValueDosage => {
                                if r#default_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "defaultValueDosage",
                                    ));
                                }
                                r#default_value = Some(ElementDefinitionDefaultValue::Dosage(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::MeaningWhenMissing => {
                                if _ctx.from_json {
                                    let some =
                                        r#meaning_when_missing.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "meaningWhenMissing",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#meaning_when_missing.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "meaningWhenMissing",
                                        ));
                                    }
                                    r#meaning_when_missing = Some(map_access.next_value()?);
                                }
                            }
                            Field::MeaningWhenMissingPrimitiveElement => {
                                if _ctx.from_json {
                                    let some =
                                        r#meaning_when_missing.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_meaningWhenMissing",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "meaningWhenMissing",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::OrderMeaning => {
                                if _ctx.from_json {
                                    let some = r#order_meaning.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "orderMeaning",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#order_meaning.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "orderMeaning",
                                        ));
                                    }
                                    r#order_meaning = Some(map_access.next_value()?);
                                }
                            }
                            Field::OrderMeaningPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#order_meaning.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_orderMeaning",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "orderMeaning",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedBase64Binary => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Base64Binary(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Base64Binary(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedBase64Binary",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedBase64Binary",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Base64Binary(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedBase64BinaryPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Base64Binary(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Base64Binary(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedBase64Binary",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedBase64Binary",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedBoolean => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Boolean(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedBoolean",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedBoolean",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Boolean(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedBooleanPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Boolean(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedBoolean",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedBoolean",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedCanonical => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Canonical(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Canonical(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedCanonical",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedCanonical",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Canonical(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedCanonicalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Canonical(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Canonical(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedCanonical",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedCanonical",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedCode => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Code(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Code(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedCode",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedCode"));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Code(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedCodePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Code(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Code(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedCode",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedCode",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedDate => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Date(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedDate"));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Date(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedDate",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::DateTime(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedDateTime",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::DateTime(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::DateTime(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Decimal(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedDecimal",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Decimal(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedId => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(ElementDefinitionFixed::Id(
                                        Default::default(),
                                    ));
                                    if let ElementDefinitionFixed::Id(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedId",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedId"));
                                    }
                                    r#fixed =
                                        Some(ElementDefinitionFixed::Id(map_access.next_value()?));
                                }
                            }
                            Field::FixedIdPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(ElementDefinitionFixed::Id(
                                        Default::default(),
                                    ));
                                    if let ElementDefinitionFixed::Id(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedId",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedId",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Instant(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedInstant",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Instant(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Integer(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedInteger",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Integer(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedMarkdown => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Markdown(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedMarkdown",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedMarkdown",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Markdown(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedMarkdownPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Markdown(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedMarkdown",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedMarkdown",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedOid => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Oid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedOid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedOid"));
                                    }
                                    r#fixed =
                                        Some(ElementDefinitionFixed::Oid(map_access.next_value()?));
                                }
                            }
                            Field::FixedOidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Oid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedOid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedOid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedPositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::PositiveInt(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedPositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedPositiveInt",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::PositiveInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedPositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::PositiveInt(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedPositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedPositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedString => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::String(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::String(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedString",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedString",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::String(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedStringPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::String(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::String(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedString",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedString",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedTime => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Time(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedTime"));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Time(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::UnsignedInt(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "fixedUnsignedInt",
                                        ));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::UnsignedInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::UnsignedInt(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedUri => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Uri(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedUri",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedUri"));
                                    }
                                    r#fixed =
                                        Some(ElementDefinitionFixed::Uri(map_access.next_value()?));
                                }
                            }
                            Field::FixedUriPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Uri(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedUri",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedUri",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedUrl => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Url(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Url(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedUrl",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedUrl"));
                                    }
                                    r#fixed =
                                        Some(ElementDefinitionFixed::Url(map_access.next_value()?));
                                }
                            }
                            Field::FixedUrlPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Url(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Url(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedUrl",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedUrl",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedUuid => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Uuid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "fixedUuid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("fixed[x]"));
                                    }
                                } else {
                                    if r#fixed.is_some() {
                                        return Err(serde::de::Error::duplicate_field("fixedUuid"));
                                    }
                                    r#fixed = Some(ElementDefinitionFixed::Uuid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::FixedUuidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#fixed.get_or_insert(
                                        ElementDefinitionFixed::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionFixed::Uuid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_fixedUuid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field("_fixed[x]"));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "fixedUuid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::FixedAddress => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedAddress"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Address(map_access.next_value()?));
                            }
                            Field::FixedAge => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedAge"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Age(map_access.next_value()?));
                            }
                            Field::FixedAnnotation => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedAnnotation",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Annotation(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedAttachment => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedAttachment",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Attachment(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedCodeableConcept => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedCodeableConcept",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::CodeableConcept(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedCodeableReference => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedCodeableReference",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::CodeableReference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedCoding => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedCoding"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Coding(map_access.next_value()?));
                            }
                            Field::FixedContactPoint => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedContactPoint",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::ContactPoint(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedCount => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedCount"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Count(map_access.next_value()?));
                            }
                            Field::FixedDistance => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedDistance"));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Distance(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedDuration => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedDuration"));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Duration(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedHumanName => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedHumanName",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::HumanName(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedIdentifier => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedIdentifier",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Identifier(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedMoney => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedMoney"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Money(map_access.next_value()?));
                            }
                            Field::FixedPeriod => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedPeriod"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Period(map_access.next_value()?));
                            }
                            Field::FixedQuantity => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedQuantity"));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedRange => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedRange"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Range(map_access.next_value()?));
                            }
                            Field::FixedRatio => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedRatio"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Ratio(map_access.next_value()?));
                            }
                            Field::FixedRatioRange => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedRatioRange",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::RatioRange(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedReference => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedReference",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Reference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedSampledData => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedSampledData",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::SampledData(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedSignature => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedSignature",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Signature(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedTiming => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedTiming"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Timing(map_access.next_value()?));
                            }
                            Field::FixedContactDetail => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedContactDetail",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::ContactDetail(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedContributor => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedContributor",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Contributor(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedDataRequirement => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedDataRequirement",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::DataRequirement(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedExpression => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedExpression",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::Expression(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedParameterDefinition => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedParameterDefinition",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::ParameterDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedRelatedArtifact => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedRelatedArtifact",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::RelatedArtifact(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedTriggerDefinition => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedTriggerDefinition",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::TriggerDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedUsageContext => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "fixedUsageContext",
                                    ));
                                }
                                r#fixed = Some(ElementDefinitionFixed::UsageContext(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::FixedDosage => {
                                if r#fixed.is_some() {
                                    return Err(serde::de::Error::duplicate_field("fixedDosage"));
                                }
                                r#fixed =
                                    Some(ElementDefinitionFixed::Dosage(map_access.next_value()?));
                            }
                            Field::PatternBase64Binary => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Base64Binary(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Base64Binary(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternBase64Binary",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternBase64Binary",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Base64Binary(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternBase64BinaryPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Base64Binary(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Base64Binary(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternBase64Binary",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternBase64Binary",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternBoolean => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Boolean(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternBoolean",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternBoolean",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Boolean(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternBooleanPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Boolean(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Boolean(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternBoolean",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternBoolean",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternCanonical => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Canonical(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Canonical(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternCanonical",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternCanonical",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Canonical(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternCanonicalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Canonical(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Canonical(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternCanonical",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternCanonical",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternCode => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Code(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Code(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternCode",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternCode",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Code(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternCodePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Code(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Code(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternCode",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternCode",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternDate => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Date(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternDate",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Date(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternDate",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::DateTime(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternDateTime",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::DateTime(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::DateTime(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Decimal(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternDecimal",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Decimal(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternId => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Id(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Id(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternId",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field("patternId"));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Id(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternIdPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Id(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Id(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternId",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternId",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Instant(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternInstant",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Instant(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Integer(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternInteger",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Integer(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternMarkdown => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Markdown(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternMarkdown",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternMarkdown",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Markdown(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternMarkdownPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Markdown(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Markdown(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternMarkdown",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternMarkdown",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternOid => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Oid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternOid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternOid",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Oid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternOidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Oid(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Oid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternOid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternOid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternPositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::PositiveInt(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternPositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternPositiveInt",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::PositiveInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternPositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::PositiveInt(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternPositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternPositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternString => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::String(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::String(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternString",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternString",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::String(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternStringPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::String(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::String(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternString",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternString",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternTime => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Time(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternTime",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Time(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::UnsignedInt(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternUnsignedInt",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::UnsignedInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::UnsignedInt(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternUri => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Uri(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternUri",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternUri",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Uri(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternUriPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Uri(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Uri(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternUri",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternUri",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternUrl => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Url(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Url(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternUrl",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternUrl",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Url(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternUrlPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Url(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Url(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternUrl",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternUrl",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternUuid => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Uuid(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "patternUuid",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "pattern[x]",
                                        ));
                                    }
                                } else {
                                    if r#pattern.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "patternUuid",
                                        ));
                                    }
                                    r#pattern = Some(ElementDefinitionPattern::Uuid(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::PatternUuidPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#pattern.get_or_insert(
                                        ElementDefinitionPattern::Uuid(Default::default()),
                                    );
                                    if let ElementDefinitionPattern::Uuid(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_patternUuid",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_pattern[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "patternUuid",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::PatternAddress => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternAddress",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Address(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternAge => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternAge"));
                                }
                                r#pattern =
                                    Some(ElementDefinitionPattern::Age(map_access.next_value()?));
                            }
                            Field::PatternAnnotation => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternAnnotation",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Annotation(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternAttachment => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternAttachment",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Attachment(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternCodeableConcept => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternCodeableConcept",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::CodeableConcept(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternCodeableReference => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternCodeableReference",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::CodeableReference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternCoding => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternCoding"));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Coding(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternContactPoint => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternContactPoint",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::ContactPoint(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternCount => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternCount"));
                                }
                                r#pattern =
                                    Some(ElementDefinitionPattern::Count(map_access.next_value()?));
                            }
                            Field::PatternDistance => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternDistance",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Distance(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternDuration => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternDuration",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Duration(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternHumanName => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternHumanName",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::HumanName(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternIdentifier => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternIdentifier",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Identifier(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternMoney => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternMoney"));
                                }
                                r#pattern =
                                    Some(ElementDefinitionPattern::Money(map_access.next_value()?));
                            }
                            Field::PatternPeriod => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternPeriod"));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Period(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternQuantity => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternQuantity",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternRange => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternRange"));
                                }
                                r#pattern =
                                    Some(ElementDefinitionPattern::Range(map_access.next_value()?));
                            }
                            Field::PatternRatio => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternRatio"));
                                }
                                r#pattern =
                                    Some(ElementDefinitionPattern::Ratio(map_access.next_value()?));
                            }
                            Field::PatternRatioRange => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternRatioRange",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::RatioRange(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternReference => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternReference",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Reference(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternSampledData => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternSampledData",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::SampledData(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternSignature => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternSignature",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Signature(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternTiming => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternTiming"));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Timing(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternContactDetail => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternContactDetail",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::ContactDetail(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternContributor => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternContributor",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Contributor(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternDataRequirement => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternDataRequirement",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::DataRequirement(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternExpression => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternExpression",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Expression(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternParameterDefinition => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternParameterDefinition",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::ParameterDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternRelatedArtifact => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternRelatedArtifact",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::RelatedArtifact(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternTriggerDefinition => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternTriggerDefinition",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::TriggerDefinition(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternUsageContext => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "patternUsageContext",
                                    ));
                                }
                                r#pattern = Some(ElementDefinitionPattern::UsageContext(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::PatternDosage => {
                                if r#pattern.is_some() {
                                    return Err(serde::de::Error::duplicate_field("patternDosage"));
                                }
                                r#pattern = Some(ElementDefinitionPattern::Dosage(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::Example => {
                                if r#example.is_some() {
                                    return Err(serde::de::Error::duplicate_field("example"));
                                }
                                r#example = Some(map_access.next_value()?);
                            }
                            Field::MinValueDate => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueDate",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueDate",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::DateTime(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueDateTime",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::DateTime(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::DateTime(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Instant(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueInstant",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Instant(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueTime => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueTime",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Decimal(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueDecimal",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Decimal(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Integer(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueInteger",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::Integer(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValuePositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::PositiveInt(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValuePositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValuePositiveInt",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::PositiveInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValuePositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::PositiveInt(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValuePositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValuePositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::UnsignedInt(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "minValueUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#min_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "minValueUnsignedInt",
                                        ));
                                    }
                                    r#min_value = Some(ElementDefinitionMinValue::UnsignedInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MinValueUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#min_value.get_or_insert(
                                        ElementDefinitionMinValue::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionMinValue::UnsignedInt(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_minValueUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_minValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "minValueUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MinValueQuantity => {
                                if r#min_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "minValueQuantity",
                                    ));
                                }
                                r#min_value = Some(ElementDefinitionMinValue::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::MaxValueDate => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Date(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueDate",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueDate",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::Date(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueDatePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Date(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Date(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueDate",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueDate",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueDateTime => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::DateTime(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueDateTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueDateTime",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::DateTime(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueDateTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::DateTime(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::DateTime(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueDateTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueDateTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueInstant => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Instant(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueInstant",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueInstant",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::Instant(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueInstantPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Instant(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Instant(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueInstant",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueInstant",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueTime => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Time(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueTime",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueTime",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::Time(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueTimePrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Time(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Time(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueTime",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueTime",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueDecimal => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Decimal(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueDecimal",
                                            ));
                                        }
                                        let value: serde_json::Number = map_access.next_value()?;
                                        variant.value = Some(format!("{}", value));
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueDecimal",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::Decimal(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueDecimalPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Decimal(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Decimal(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueDecimal",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueDecimal",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueInteger => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Integer(variant) = r#enum {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueInteger",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueInteger",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::Integer(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueIntegerPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::Integer(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::Integer(variant) = r#enum {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueInteger",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueInteger",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValuePositiveInt => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::PositiveInt(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValuePositiveInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValuePositiveInt",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::PositiveInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValuePositiveIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::PositiveInt(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::PositiveInt(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValuePositiveInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValuePositiveInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueUnsignedInt => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::UnsignedInt(variant) = r#enum
                                    {
                                        if variant.value.is_some() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "maxValueUnsignedInt",
                                            ));
                                        }
                                        let value: _ = map_access.next_value()?;
                                        variant.value = Some(value);
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValue[x]",
                                        ));
                                    }
                                } else {
                                    if r#max_value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "maxValueUnsignedInt",
                                        ));
                                    }
                                    r#max_value = Some(ElementDefinitionMaxValue::UnsignedInt(
                                        map_access.next_value()?,
                                    ));
                                }
                            }
                            Field::MaxValueUnsignedIntPrimitiveElement => {
                                if _ctx.from_json {
                                    let r#enum = r#max_value.get_or_insert(
                                        ElementDefinitionMaxValue::UnsignedInt(Default::default()),
                                    );
                                    if let ElementDefinitionMaxValue::UnsignedInt(variant) = r#enum
                                    {
                                        if variant.id.is_some() || !variant.extension.is_empty() {
                                            return Err(serde::de::Error::duplicate_field(
                                                "_maxValueUnsignedInt",
                                            ));
                                        }
                                        let super::super::serde_helpers::PrimitiveElementOwned {
                                            id,
                                            extension,
                                        } = map_access.next_value()?;
                                        variant.id = id;
                                        variant.extension = extension;
                                    } else {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxValue[x]",
                                        ));
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxValueUnsignedInt",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::MaxValueQuantity => {
                                if r#max_value.is_some() {
                                    return Err(serde::de::Error::duplicate_field(
                                        "maxValueQuantity",
                                    ));
                                }
                                r#max_value = Some(ElementDefinitionMaxValue::Quantity(
                                    map_access.next_value()?,
                                ));
                            }
                            Field::MaxLength => {
                                if _ctx.from_json {
                                    let some = r#max_length.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("maxLength"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#max_length.is_some() {
                                        return Err(serde::de::Error::duplicate_field("maxLength"));
                                    }
                                    r#max_length = Some(map_access.next_value()?);
                                }
                            }
                            Field::MaxLengthPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#max_length.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_maxLength",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "maxLength",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Condition => {
                                if _ctx.from_json {
                                    let values: Vec<Option<_>> = map_access.next_value()?;
                                    let vec = r#condition.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(values.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != values.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            values.len(),
                                            &"primitive elements length",
                                        ));
                                    }
                                    if vec.iter().any(|v| v.value.is_some()) {
                                        return Err(serde::de::Error::duplicate_field("condition"));
                                    }
                                    for (i, value) in values.into_iter().enumerate() {
                                        if let Some(value) = value {
                                            vec[i].value = Some(value);
                                        }
                                    }
                                } else {
                                    if r#condition.is_some() {
                                        return Err(serde::de::Error::duplicate_field("condition"));
                                    }
                                    r#condition = Some(map_access.next_value()?);
                                }
                            }
                            Field::ConditionPrimitiveElement => {
                                if _ctx.from_json {
                                    let elements: Vec<
                                        Option<super::super::serde_helpers::PrimitiveElementOwned>,
                                    > = map_access.next_value()?;
                                    let vec = r#condition.get_or_insert(
                                        std::iter::repeat(Default::default())
                                            .take(elements.len())
                                            .collect::<Vec<_>>(),
                                    );
                                    if vec.len() != elements.len() {
                                        return Err(serde::de::Error::invalid_length(
                                            elements.len(),
                                            &"primitive values length",
                                        ));
                                    }
                                    if vec
                                        .iter()
                                        .any(|e| e.id.is_some() || !e.extension.is_empty())
                                    {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_condition",
                                        ));
                                    }
                                    for (i, element) in elements.into_iter().enumerate() {
                                        if let Some(element) = element {
                                            vec[i].id = element.id;
                                            vec[i].extension = element.extension;
                                        }
                                    }
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "condition",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Constraint => {
                                if r#constraint.is_some() {
                                    return Err(serde::de::Error::duplicate_field("constraint"));
                                }
                                r#constraint = Some(map_access.next_value()?);
                            }
                            Field::MustSupport => {
                                if _ctx.from_json {
                                    let some = r#must_support.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "mustSupport",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#must_support.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "mustSupport",
                                        ));
                                    }
                                    r#must_support = Some(map_access.next_value()?);
                                }
                            }
                            Field::MustSupportPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#must_support.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_mustSupport",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "mustSupport",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::IsModifier => {
                                if _ctx.from_json {
                                    let some = r#is_modifier.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "isModifier",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#is_modifier.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "isModifier",
                                        ));
                                    }
                                    r#is_modifier = Some(map_access.next_value()?);
                                }
                            }
                            Field::IsModifierPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#is_modifier.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_isModifier",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "isModifier",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::IsModifierReason => {
                                if _ctx.from_json {
                                    let some =
                                        r#is_modifier_reason.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "isModifierReason",
                                        ));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#is_modifier_reason.is_some() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "isModifierReason",
                                        ));
                                    }
                                    r#is_modifier_reason = Some(map_access.next_value()?);
                                }
                            }
                            Field::IsModifierReasonPrimitiveElement => {
                                if _ctx.from_json {
                                    let some =
                                        r#is_modifier_reason.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_isModifierReason",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "isModifierReason",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::IsSummary => {
                                if _ctx.from_json {
                                    let some = r#is_summary.get_or_insert(Default::default());
                                    if some.value.is_some() {
                                        return Err(serde::de::Error::duplicate_field("isSummary"));
                                    }
                                    let value: _ = map_access.next_value()?;
                                    some.value = Some(value);
                                } else {
                                    if r#is_summary.is_some() {
                                        return Err(serde::de::Error::duplicate_field("isSummary"));
                                    }
                                    r#is_summary = Some(map_access.next_value()?);
                                }
                            }
                            Field::IsSummaryPrimitiveElement => {
                                if _ctx.from_json {
                                    let some = r#is_summary.get_or_insert(Default::default());
                                    if some.id.is_some() || !some.extension.is_empty() {
                                        return Err(serde::de::Error::duplicate_field(
                                            "_isSummary",
                                        ));
                                    }
                                    let super::super::serde_helpers::PrimitiveElementOwned {
                                        id,
                                        extension,
                                    } = map_access.next_value()?;
                                    some.id = id;
                                    some.extension = extension;
                                } else {
                                    return Err(serde::de::Error::unknown_field(
                                        "isSummary",
                                        &[
                                            "id",
                                            "extension",
                                            "modifierExtension",
                                            "path",
                                            "representation",
                                            "sliceName",
                                            "sliceIsConstraining",
                                            "label",
                                            "code",
                                            "slicing",
                                            "short",
                                            "definition",
                                            "comment",
                                            "requirements",
                                            "alias",
                                            "min",
                                            "max",
                                            "base",
                                            "contentReference",
                                            "type",
                                            "defaultValueBase64Binary",
                                            "defaultValueBoolean",
                                            "defaultValueCanonical",
                                            "defaultValueCode",
                                            "defaultValueDate",
                                            "defaultValueDateTime",
                                            "defaultValueDecimal",
                                            "defaultValueId",
                                            "defaultValueInstant",
                                            "defaultValueInteger",
                                            "defaultValueMarkdown",
                                            "defaultValueOid",
                                            "defaultValuePositiveInt",
                                            "defaultValueString",
                                            "defaultValueTime",
                                            "defaultValueUnsignedInt",
                                            "defaultValueUri",
                                            "defaultValueUrl",
                                            "defaultValueUuid",
                                            "defaultValueAddress",
                                            "defaultValueAge",
                                            "defaultValueAnnotation",
                                            "defaultValueAttachment",
                                            "defaultValueCodeableConcept",
                                            "defaultValueCodeableReference",
                                            "defaultValueCoding",
                                            "defaultValueContactPoint",
                                            "defaultValueCount",
                                            "defaultValueDistance",
                                            "defaultValueDuration",
                                            "defaultValueHumanName",
                                            "defaultValueIdentifier",
                                            "defaultValueMoney",
                                            "defaultValuePeriod",
                                            "defaultValueQuantity",
                                            "defaultValueRange",
                                            "defaultValueRatio",
                                            "defaultValueRatioRange",
                                            "defaultValueReference",
                                            "defaultValueSampledData",
                                            "defaultValueSignature",
                                            "defaultValueTiming",
                                            "defaultValueContactDetail",
                                            "defaultValueContributor",
                                            "defaultValueDataRequirement",
                                            "defaultValueExpression",
                                            "defaultValueParameterDefinition",
                                            "defaultValueRelatedArtifact",
                                            "defaultValueTriggerDefinition",
                                            "defaultValueUsageContext",
                                            "defaultValueDosage",
                                            "meaningWhenMissing",
                                            "orderMeaning",
                                            "fixedBase64Binary",
                                            "fixedBoolean",
                                            "fixedCanonical",
                                            "fixedCode",
                                            "fixedDate",
                                            "fixedDateTime",
                                            "fixedDecimal",
                                            "fixedId",
                                            "fixedInstant",
                                            "fixedInteger",
                                            "fixedMarkdown",
                                            "fixedOid",
                                            "fixedPositiveInt",
                                            "fixedString",
                                            "fixedTime",
                                            "fixedUnsignedInt",
                                            "fixedUri",
                                            "fixedUrl",
                                            "fixedUuid",
                                            "fixedAddress",
                                            "fixedAge",
                                            "fixedAnnotation",
                                            "fixedAttachment",
                                            "fixedCodeableConcept",
                                            "fixedCodeableReference",
                                            "fixedCoding",
                                            "fixedContactPoint",
                                            "fixedCount",
                                            "fixedDistance",
                                            "fixedDuration",
                                            "fixedHumanName",
                                            "fixedIdentifier",
                                            "fixedMoney",
                                            "fixedPeriod",
                                            "fixedQuantity",
                                            "fixedRange",
                                            "fixedRatio",
                                            "fixedRatioRange",
                                            "fixedReference",
                                            "fixedSampledData",
                                            "fixedSignature",
                                            "fixedTiming",
                                            "fixedContactDetail",
                                            "fixedContributor",
                                            "fixedDataRequirement",
                                            "fixedExpression",
                                            "fixedParameterDefinition",
                                            "fixedRelatedArtifact",
                                            "fixedTriggerDefinition",
                                            "fixedUsageContext",
                                            "fixedDosage",
                                            "patternBase64Binary",
                                            "patternBoolean",
                                            "patternCanonical",
                                            "patternCode",
                                            "patternDate",
                                            "patternDateTime",
                                            "patternDecimal",
                                            "patternId",
                                            "patternInstant",
                                            "patternInteger",
                                            "patternMarkdown",
                                            "patternOid",
                                            "patternPositiveInt",
                                            "patternString",
                                            "patternTime",
                                            "patternUnsignedInt",
                                            "patternUri",
                                            "patternUrl",
                                            "patternUuid",
                                            "patternAddress",
                                            "patternAge",
                                            "patternAnnotation",
                                            "patternAttachment",
                                            "patternCodeableConcept",
                                            "patternCodeableReference",
                                            "patternCoding",
                                            "patternContactPoint",
                                            "patternCount",
                                            "patternDistance",
                                            "patternDuration",
                                            "patternHumanName",
                                            "patternIdentifier",
                                            "patternMoney",
                                            "patternPeriod",
                                            "patternQuantity",
                                            "patternRange",
                                            "patternRatio",
                                            "patternRatioRange",
                                            "patternReference",
                                            "patternSampledData",
                                            "patternSignature",
                                            "patternTiming",
                                            "patternContactDetail",
                                            "patternContributor",
                                            "patternDataRequirement",
                                            "patternExpression",
                                            "patternParameterDefinition",
                                            "patternRelatedArtifact",
                                            "patternTriggerDefinition",
                                            "patternUsageContext",
                                            "patternDosage",
                                            "example",
                                            "minValueDate",
                                            "minValueDateTime",
                                            "minValueInstant",
                                            "minValueTime",
                                            "minValueDecimal",
                                            "minValueInteger",
                                            "minValuePositiveInt",
                                            "minValueUnsignedInt",
                                            "minValueQuantity",
                                            "maxValueDate",
                                            "maxValueDateTime",
                                            "maxValueInstant",
                                            "maxValueTime",
                                            "maxValueDecimal",
                                            "maxValueInteger",
                                            "maxValuePositiveInt",
                                            "maxValueUnsignedInt",
                                            "maxValueQuantity",
                                            "maxLength",
                                            "condition",
                                            "constraint",
                                            "mustSupport",
                                            "isModifier",
                                            "isModifierReason",
                                            "isSummary",
                                            "binding",
                                            "mapping",
                                        ],
                                    ));
                                }
                            }
                            Field::Binding => {
                                if r#binding.is_some() {
                                    return Err(serde::de::Error::duplicate_field("binding"));
                                }
                                r#binding = Some(map_access.next_value()?);
                            }
                            Field::Mapping => {
                                if r#mapping.is_some() {
                                    return Err(serde::de::Error::duplicate_field("mapping"));
                                }
                                r#mapping = Some(map_access.next_value()?);
                            }
                            Field::Unknown(key) => if _ctx.config.mode
                                == fhirbolt_shared::serde_context::de::DeserializationMode::Strict
                            {
                                return Err(serde::de::Error::unknown_field(
                                    &key,
                                    &[
                                        "id",
                                        "extension",
                                        "modifierExtension",
                                        "path",
                                        "representation",
                                        "sliceName",
                                        "sliceIsConstraining",
                                        "label",
                                        "code",
                                        "slicing",
                                        "short",
                                        "definition",
                                        "comment",
                                        "requirements",
                                        "alias",
                                        "min",
                                        "max",
                                        "base",
                                        "contentReference",
                                        "type",
                                        "defaultValueBase64Binary",
                                        "defaultValueBoolean",
                                        "defaultValueCanonical",
                                        "defaultValueCode",
                                        "defaultValueDate",
                                        "defaultValueDateTime",
                                        "defaultValueDecimal",
                                        "defaultValueId",
                                        "defaultValueInstant",
                                        "defaultValueInteger",
                                        "defaultValueMarkdown",
                                        "defaultValueOid",
                                        "defaultValuePositiveInt",
                                        "defaultValueString",
                                        "defaultValueTime",
                                        "defaultValueUnsignedInt",
                                        "defaultValueUri",
                                        "defaultValueUrl",
                                        "defaultValueUuid",
                                        "defaultValueAddress",
                                        "defaultValueAge",
                                        "defaultValueAnnotation",
                                        "defaultValueAttachment",
                                        "defaultValueCodeableConcept",
                                        "defaultValueCodeableReference",
                                        "defaultValueCoding",
                                        "defaultValueContactPoint",
                                        "defaultValueCount",
                                        "defaultValueDistance",
                                        "defaultValueDuration",
                                        "defaultValueHumanName",
                                        "defaultValueIdentifier",
                                        "defaultValueMoney",
                                        "defaultValuePeriod",
                                        "defaultValueQuantity",
                                        "defaultValueRange",
                                        "defaultValueRatio",
                                        "defaultValueRatioRange",
                                        "defaultValueReference",
                                        "defaultValueSampledData",
                                        "defaultValueSignature",
                                        "defaultValueTiming",
                                        "defaultValueContactDetail",
                                        "defaultValueContributor",
                                        "defaultValueDataRequirement",
                                        "defaultValueExpression",
                                        "defaultValueParameterDefinition",
                                        "defaultValueRelatedArtifact",
                                        "defaultValueTriggerDefinition",
                                        "defaultValueUsageContext",
                                        "defaultValueDosage",
                                        "meaningWhenMissing",
                                        "orderMeaning",
                                        "fixedBase64Binary",
                                        "fixedBoolean",
                                        "fixedCanonical",
                                        "fixedCode",
                                        "fixedDate",
                                        "fixedDateTime",
                                        "fixedDecimal",
                                        "fixedId",
                                        "fixedInstant",
                                        "fixedInteger",
                                        "fixedMarkdown",
                                        "fixedOid",
                                        "fixedPositiveInt",
                                        "fixedString",
                                        "fixedTime",
                                        "fixedUnsignedInt",
                                        "fixedUri",
                                        "fixedUrl",
                                        "fixedUuid",
                                        "fixedAddress",
                                        "fixedAge",
                                        "fixedAnnotation",
                                        "fixedAttachment",
                                        "fixedCodeableConcept",
                                        "fixedCodeableReference",
                                        "fixedCoding",
                                        "fixedContactPoint",
                                        "fixedCount",
                                        "fixedDistance",
                                        "fixedDuration",
                                        "fixedHumanName",
                                        "fixedIdentifier",
                                        "fixedMoney",
                                        "fixedPeriod",
                                        "fixedQuantity",
                                        "fixedRange",
                                        "fixedRatio",
                                        "fixedRatioRange",
                                        "fixedReference",
                                        "fixedSampledData",
                                        "fixedSignature",
                                        "fixedTiming",
                                        "fixedContactDetail",
                                        "fixedContributor",
                                        "fixedDataRequirement",
                                        "fixedExpression",
                                        "fixedParameterDefinition",
                                        "fixedRelatedArtifact",
                                        "fixedTriggerDefinition",
                                        "fixedUsageContext",
                                        "fixedDosage",
                                        "patternBase64Binary",
                                        "patternBoolean",
                                        "patternCanonical",
                                        "patternCode",
                                        "patternDate",
                                        "patternDateTime",
                                        "patternDecimal",
                                        "patternId",
                                        "patternInstant",
                                        "patternInteger",
                                        "patternMarkdown",
                                        "patternOid",
                                        "patternPositiveInt",
                                        "patternString",
                                        "patternTime",
                                        "patternUnsignedInt",
                                        "patternUri",
                                        "patternUrl",
                                        "patternUuid",
                                        "patternAddress",
                                        "patternAge",
                                        "patternAnnotation",
                                        "patternAttachment",
                                        "patternCodeableConcept",
                                        "patternCodeableReference",
                                        "patternCoding",
                                        "patternContactPoint",
                                        "patternCount",
                                        "patternDistance",
                                        "patternDuration",
                                        "patternHumanName",
                                        "patternIdentifier",
                                        "patternMoney",
                                        "patternPeriod",
                                        "patternQuantity",
                                        "patternRange",
                                        "patternRatio",
                                        "patternRatioRange",
                                        "patternReference",
                                        "patternSampledData",
                                        "patternSignature",
                                        "patternTiming",
                                        "patternContactDetail",
                                        "patternContributor",
                                        "patternDataRequirement",
                                        "patternExpression",
                                        "patternParameterDefinition",
                                        "patternRelatedArtifact",
                                        "patternTriggerDefinition",
                                        "patternUsageContext",
                                        "patternDosage",
                                        "example",
                                        "minValueDate",
                                        "minValueDateTime",
                                        "minValueInstant",
                                        "minValueTime",
                                        "minValueDecimal",
                                        "minValueInteger",
                                        "minValuePositiveInt",
                                        "minValueUnsignedInt",
                                        "minValueQuantity",
                                        "maxValueDate",
                                        "maxValueDateTime",
                                        "maxValueInstant",
                                        "maxValueTime",
                                        "maxValueDecimal",
                                        "maxValueInteger",
                                        "maxValuePositiveInt",
                                        "maxValueUnsignedInt",
                                        "maxValueQuantity",
                                        "maxLength",
                                        "condition",
                                        "constraint",
                                        "mustSupport",
                                        "isModifier",
                                        "isModifierReason",
                                        "isSummary",
                                        "binding",
                                        "mapping",
                                    ],
                                ));
                            },
                        }
                    }
                    Ok(ElementDefinition {
                        r#id,
                        r#extension: r#extension.unwrap_or(vec![]),
                        r#modifier_extension: r#modifier_extension.unwrap_or(vec![]),
                        r#path: if _ctx.config.mode
                            == fhirbolt_shared::serde_context::de::DeserializationMode::Lax
                        {
                            r#path.unwrap_or(Default::default())
                        } else {
                            r#path.ok_or(serde::de::Error::missing_field("path"))?
                        },
                        r#representation: r#representation.unwrap_or(vec![]),
                        r#slice_name,
                        r#slice_is_constraining,
                        r#label,
                        r#code: r#code.unwrap_or(vec![]),
                        r#slicing,
                        r#short,
                        r#definition,
                        r#comment,
                        r#requirements,
                        r#alias: r#alias.unwrap_or(vec![]),
                        r#min,
                        r#max,
                        r#base,
                        r#content_reference,
                        r#type: r#type.unwrap_or(vec![]),
                        r#default_value,
                        r#meaning_when_missing,
                        r#order_meaning,
                        r#fixed,
                        r#pattern,
                        r#example: r#example.unwrap_or(vec![]),
                        r#min_value,
                        r#max_value,
                        r#max_length,
                        r#condition: r#condition.unwrap_or(vec![]),
                        r#constraint: r#constraint.unwrap_or(vec![]),
                        r#must_support,
                        r#is_modifier,
                        r#is_modifier_reason,
                        r#is_summary,
                        r#binding,
                        r#mapping: r#mapping.unwrap_or(vec![]),
                    })
                })
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}
